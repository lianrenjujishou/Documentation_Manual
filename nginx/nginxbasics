nginx里面常用的基础块有3个:
  http{}
  server{}
  location{}
这三个块的位置关系是:
  http{
      server{
            location{
            }
      }
  }
  *.http块只可以有一个, server块和location块可以有多个

接下来再说块中的指令,每个块中都有很多的指令,常见的有(指令大全: https://nginx.org/en/docs/dirindex.html):
    listen: 监听的端口          //server
    root: 设置寻找文件的根目录   // http,server,location
    index: 索引文件名称         // http,server,location
    server_name: 匹配Host请求头 // server
    *.如果不同辈份的块中出现了同一个指令,则小辈的优先级更高
这三个块之间大的逻辑也很清楚,最外层的http块表示这是一个http服务器,该块下的指令一般是全局性的一些东西,这里不作讨论, 而http服务器是提供服务的,而具体是为谁(哪个端口)提供服务,就要靠server{}块了,
其实如果表达成要靠server块和它里面的listen指令就更清楚了,如server{listen 80;}和server{listen 90;}等, 当请求过来后,知道了让哪个server来处理了,后面就是对请求的目录进行处理了,此时就是
location{}块的工作了,如location / {}则是处理根请求, location ~ \.(jpg|png)$ {}块则是处理后缀是jpg或png的请求.

https://nginx.org/en/docs/http/request_processing.html
https://nginx.org/en/docs/http/ngx_http_core_module.html#location
很多时候,不同的server里listen监听的对象是相同的, 此时要怎么确定到底将请求分发给哪个server处理呢:
    1.当只有listen指令没有server_name指令时,就明确按照哪个listen满足要求就按哪个来:
    2.当listen和server_name同时存在,且有多个listen满足要求,则哪个server中的server_name匹配请求Host,则最终哪个server处理这个请求;
    3.                                               但没有一个server_name满足要求,则看listen后面有没有default_server属性,当没有该属性时,则满足条件的这些listen,哪个排序靠上使用相应的server处理该请求;
    4.                                                                                                             ,当有该属性时,使用相应listen所在的server处理该请求
    *.0.4.8版本后,如果没有显式的指定server_name,则默认值为空字符串,"".
    
很多时候,相应server里的多个locations都满足要求,但具体用哪个location,按照逻辑:
    1.先匹配前缀locations,找到最长的匹配并记住,但先不用;然后匹配正则locations,如果某个正则location匹配上了则直接使用该正则的location,如果所有的正则locations都没有匹配上,则反过头来使用前缀匹配时,最长匹配的那个location.
    *.location指令后的形式: 
        前缀  / /abc /abc/ /abc/x.html
        正则  ~ \.php$  ~ \.(jpg|png)$ 指定正则必须用~或~*,~表示字符串匹配时区分大小写, ~*表示不区分大小写. 不区分大小写指的是请求过来的资源定位字符串和location后的正则字符串模式匹配时不区分大小写.需要最终寻址路径如果是没有file只有路径的,则是"root+请求过来的uri资源定位字符串+index指令中指定的文件名",如果是有file的,则是"root+uri资源定位字符串",也就是最终的寻址和location后的字符串大小写没关系,看的只是请求过来的uri资源定位字符串.
        *.前缀 前可以有两个修饰符:  = ^~
              因为前面说过先匹配前缀,后匹配正则,但只有正则没有满足的才回过头来用最长匹配的长缀所在的location, 如果=修饰符出现,则如果相应的前缀能够完全精确的匹配上请求uri资源定位字符串,则不进行后面的正则匹配了,直接就使用=所在的这个location.
                                                                                                如果^~修饰符出现在某个前缀前,并且当所有前缀都匹配完发现该前缀还是匹配最长的那个,此时也就不继续进行正则匹配了,还是使用^~所在的这个location. 相反,如果^~修饰的前缀非最长的那个,还是要继续向下匹配正则的,此时如果正则匹配上了用相应正则所在的location,如果正则没有匹配,则使用之前前缀最长匹配.
    **.凡是资源定位符只有路径没有文件的(这句说的不对,结尾是不是文件都有可能被追加/,location中只说了前缀的情况,但没说正则的),并且路径末尾没有/结尾,都会发生两次请求(通过浏览器的networking监控可以看到,301第一次,加上/后200第二次),第一次请求会将请求结尾加上/后再次发送,如果请求过多对服务器也是一个压力,所以在uri只有文件夹路径时末尾加上/也是一个小优化. //如果不希望这种情况发生,可以定义一个精确匹配,如location = /usr {},此时如果请求是http://127.0.0.1/usr就不会先重定向到http://127.0.0.1/usr/再进行二次请求了,因为服务器端可以精确匹配/usr,

当uri是目录会用到索引,用到索引时会导致在内部发生二次匹配: 如location = / {} 和location / {}, 当请求为/时由于先发生前缀匹配并且 = /是最大匹配且有等于号修饰,所以第一次匹配就停止了,又因为uri是个目录,所以要用到index指令指定的文件,如index.html,此时会使用/index.html再次去进行匹配,此时因为/index.html不匹配 = / 所以最终是由 / 所在的location进行处理,最直观的就是这两个location的root指令指定的位置不同时,= /为/var, /为/var/html,你以为会去/var下寻找index.html,但实际上是去/var/html/下寻找. 如果想让http://127.0.0.1/usr和http://127.0.0.1/usr/作为两个请求,则定义两个location,一个是= /usr 一个是 /usr/     

*****问题1*****
location匹配方式有两种, 前缀和正则, 而
location块中匹配位置的指令常用的有两种, root和alias,当
location使用前缀匹配时,无论是root还是alias都能按照我们想的正常工作,
即对于127.0.0.1/img/ok.html这个链接来说:
   location /img/ { root /var/;}  //能够拿到/var/img/ok.html这个路径的文件
   location /img/ {alias /var/;}  //能够拿到/var/ok.html这个路径的文件
但当,
location匹配方式为正则时,
   对于127.0.0.1/imgv/ok.html这个链接来说:
     location ~ /img.*/ { root /var/;} //能够拿到/var/imgv/ok.html这个路径的文件
   但,location ~ /img.*/ {alias /var/;} //则不能拿到/var/ok.html这个路径的文件,报403 Forbidden, 而官方给的alias指令的介绍也说了,如果alias用在使用正则匹配的location中,则要在正则中使用组,然后在alias中指定的路径中使用$n引用这个组:
      location ~ /img.*/(.*)$ {alias /var/$1;}  //可以拿到/var/ok.html这个路径的文件.
      *.所以当location和alias配合使用时,如果location中用的是正则匹配,则正则中一定要有组,且alias中一定要对组进行引用,因为这个行为目前是已知的,不这样配合用的行为还把握不准
*****完*****

再说说对php脚本的处理,在nginx.conf中其实对php脚本的处理简单来说只是在相应server中加了一个location: https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/
  1.fastcgi_pass 127.0.0.1:900; //或socket形式
  2.fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; //这句是最关键的,也就是指定脚本文件名,很多时候,默认的$document_root不对,需要手动指定
  3.建议将所有的fastcgi_param都放到一个文件中,如fastcgi_params, 再使用include fastcgi_params包含到配置文件,这样便于统一管理
  4.将<?php var_export($_SERVER)?>放到test.php中,访问test.php文件会看到当前很多php变量值,在配置fastcgi_params时,可能有些变量你不明白啥意思,但当你php环境能用了,通过看test.php中对变量的输出,也能帮助你设置相应的变量参数
  *.nginx中默认就有对php文件的处理,只不过被注释掉了,但写的比较初级,上面给的这个网址上的配置可能要更好一些.
  *.至于php环境的设置参照cnblogs中的配置: https://www.cnblogs.com/lianrenjujishou/p/15179953.html
    *.现在能想到需要注意的就是php中对www.conf文件的应用,因为nginx中127.0.0.1:9000实际上就是php读取该配置文件起作用的.源码编译然后通过使用命令行参数进行运行,会发现一些问题,同时也正是因为这些问题会让你对相应软件有更深的理解

聊一下如何配置https:
参考链接: http://nginx.org/en/docs/http/configuring_https_servers.html
http{
  server {
    listen 443 ssl;    //上面链接明确说了, 想要使用ssl加密, listen指令后的ssl关键字不可少
    root /usr/share/nginx/html/;
    index index.html;
    server_name www.52fighting.com;
    ssl_certificate /etc/letsencrypt/live/www.52fighting.com/fullchain.pem;    //letsencrypt生成的fullchain.pem里包含公钥证书和一些中间证书
    ssl_certificate_key /etc/letsencrypt/live/www.52fighting.com/privkey.pem;
  }
}
