info ls

10.1.1之前的最后再补上
10.1.1 What information is listed
-a --all
列出目录中的所有内容，这里之所以说是所有内容是因为直接ls的话是不会将隐藏文件给显示出来的(隐藏文件的特点是文件名以点开头)；所以一句话总结一下就是ls -a的作用是"ls显示的文件 + 以点开头的文件"

另类解释:display *

例: 
   假设当前目录下有内容 . .. .a .b c d e(不管是文件还是文件夹了)，
   则ls -a的结果是 . .. .a .b c d e

-A --almost-all
我们都知道每个目录里面都会有两个固定的文件夹，一个叫"点",一个叫"两点";无论是新建的还是有内容的文件夹，点和两点 这两个文件夹是固定都有的。而隐藏文件的特点是以点开头，所以该参数的作用就是将所有以点开头的文件(隐藏文件/文件夹)都列出来，但是不包括那两个固定的文件夹"点"和"两点"
另类解释:display * except . and .. (include .*)
例: 
   假设当前目录下有内容 . .. .a .b c d e(不管是文件还是文件夹了)，
   则ls -A/--almost-all的结果是 .a .b c d e
   **.和ls -a/all相比少了那两个文件夹下默认的子文件夹.和..

-B --ignore-backups
忽略(或说不显示)以"~"结尾的文件;等价于"--ignore='*~'加上--ignore='.*~'"
**.从这个参数的解释上来看，我们可以将文件名解释为三种: 开头不带.的(显示文件)，开头带点的(隐式文件),默认的两个特殊文件夹(这个其实可以算是第二类的一个特殊情况)
另类解释: display * except .* and .*~
**. ls带单参数-B并不会显示隐藏的文件，所以ls -B相当于"ls --ignore='*~'"而ls -a/--all 或 -A/--almost-all 相当于"ls --ignore='*~' --ignore='.*~'"
例:
  假设当前目录下有内容 . .. .a .a~ .b .b~ c c~ d d~ e e~,
  则"ls -B"  或 "ls --ignore='*~'"的结果为c d e
  而"ls -a/--all -B"的结果为 . .. .a .b c d e
    "ls -A/--almost-all -B"的结果为 .a .b c d e

####虽然才说了三个命令，但是告诉我们一个事实，一定要彻底弄明白每个参数的用法才能在写组合参数时游刃有余，如果只是知其然不知其所以然，在写东西的时候一定会触到痛点的######
###以下命令中如果没提到隐藏文件的事则默认情况下所有的参数都是不显示隐藏文件的，到目前为止如果要处理隐藏文件都要借助-a/--all 或 -A/--almost-all###

-d --directory
就我目前的理解，其实info里面说的有的不明所以，该参数要讲的有两点.第一点:正常情况下ls是列出当前目录下的子目录及子文件的内容，其实直接ls是对"ls ."的缩写,我们都知道.指的是当前目录, ..指的是上级目录;而-d参数如果在省略所要查看内容(目录或文件)时，其实显示的是目录本身(.)的属性，而非目录下文件或文件夹的属性。第二点:如果在命令行上不省略所要查看的文件或是文件夹时，如果指定的文件或文件夹是符号链接文件的话,默认情况下显示的是符号链接本身的属性而非其所链接到的文件属性；如果想列出的是所链接到的文件属性的话可以再加上'-H' 或 '-L' 或 '--dereference-command-line-symlink-to-dir'参数
针对第一点的例子:
  假设有一个目录结构为/a/b,而当前目录为b,则
  "ls -d/--directory -l"的结果和"ls -l .."的结果中b目录的信息大体一致，唯一不同的地方是"ls -l .."会显示出b的文件名而在b目录下执行"ls -d/--directory -l"文件名的地方只是一个.  

针对第二点的例子(文件及文件夹为指定的符号链接而非默认的.):
 这个先不举例，因为会涉及到后面的-H,-L和--dereference-command-line-symlink-to-dir的参数，那几个参数弄明白了再讲，有一点就是要注意加参数后文件名的位置是否发生了变化，正常的是a>b，加了某些参数可能只显示a


-H --dereference-command-line
如果命令行参数为一个指定的符号链接，则显示的是链接到的文件/文件夹属性，而非链接本身的属性
例:  
  假设当前目录有两个符号链接文件，一个是git1链接到的是../git文件夹;一个是info_ls1链接到的是../info_ls文件,则

文件夹部分:
  ls -l git1显示的是:
lrwxrwxrwx 1 root root 14 May 10 21:58 git1 -> /home/yang/git
  ls -lH git1显示的是:
-rw-r--r--  1 root root  18765 May  8 22:23 COPYING
drwxr-xr-x  5 root root  12288 May  8 22:23 Documentation
-rw-r--r--  1 root root     25 May  8 22:23 GIT-VERSION-FILE
-rwxr-xr-x  1 root root    756 May  8 22:23 GIT-VERSION-GEN
-rw-r--r--  1 root root   9147 May  8 22:23 INSTALL
。。。

文件部分:
  ls -l info_ls1显示的是:
lrwxrwxrwx 1 root root 18 May 10 22:02 info_ls1 -> /home/yang/info_ls
  ls -lH info_ls1显示的是:
-rw-r--r-- 1 root root 34177 May 10 03:12 info_ls1
**.通过对文件链接和文件夹链接的操作对比可知，不加-H时对待文件夹的链接就如同对待一个普通文件一下,而加了-H后，"ls -lH git1"相当于"ls -l ../git"
而对待文件链接来说,不加-H显示的是软链接本身的一些属性，加了-H后显示的是所链接到的文件的属性，有一点要特别注意的是，虽然加了-H显示的是所链接到的文件属性,但是就回显信息的文件名仍然为链接文件的名字;而且加了-H后虽然显示的信息是链接到的文件属性，但是文件名字段却不显示指向信息了，只是单个链号链接的名字
**.-H参数对指定的参数为文件和文件夹的符号链接都起作用

--dereference-command-line-symlink-to-dir
大概的意思是对文件的软件接显示的只是软链接本身的属性，如果是对文件夹的软链接则显示的是链接到的文件夹的属性。但后面又说了这是在没有dereferenceing-related选项被指定的情况下的默认行为，括号中指出的dereferencing-related选项有'--classify'('-F'), '--directory'('-d'), ('-l'), '--dereference'('-L')
**.目前就先按对链接到的是文件的符号链接文件显示的是链号链接本身的属性
             对链接到的是文件夹的符号链接文件显示的是链接到的文件属性去理解,至少加上-l是这样的，其它几个参数有时间再验证
例1-指向的是文件夹:ls -l --dereference-command-line-symlink-to-dir git1
-rw-r--r--  1 root root  18765 May  8 22:23 COPYING
drwxr-xr-x  5 root root  12288 May  8 22:23 Documentation
-rw-r--r--  1 root root     25 May  8 22:23 GIT-VERSION-FILE
-rwxr-xr-x  1 root root    756 May  8 22:23 GIT-VERSION-GEN
-rw-r--r--  1 root root   9147 May  8 22:23 INSTALL
。。。

例2-指向的是文件:ls -l --dereference-command-line-symlink-to-dir info_ls1
lrwxrwxrwx 1 root root 18 May 10 22:02 info_ls1 -> /home/yang/info_ls

**.即默认的作用域只有文件夹，对于链接到的是文件的符号链接显示的只是链接本身的属性
--group-directories-first
如果目录下既有文件又有文件夹的话，则参数的作用是将所有文件夹分为一组，将所有文件分为一组，并分别对两组进行排序，然后输出，输出时文件夹在上，文件在下;info中还说排序时是使用被选择的sort key.还总结了一下，说--group-directories-first指定的是一个primary sort key, -sort指定的是secondary key;最后又整了个--sort='none'会完全的禁用--group-directories-fist选项，稍稍有点云里雾里，后面接触了--sort参数再回来改这块吧;目前只要简单的先知道用--group-directories-fist参数可以将文件及文件夹归类就好 --hide=PATTERN
例: 正常情况下 ls -l显示的内容类似:
total 244
drwxr-xr-x  2 root root   4096 May 10 22:02 123
drwxr-xr-x  2 root root   4096 Apr 28 01:26 Mysql
-rwxr-xr-x  1 root root     37 May  7 22:09 a.sh
lrwxrwxrwx  1 root root     13 May 10 05:54 abc -> git/version.c
-rw-r--r--  1 root root      0 May 10 05:38 a~
-rw-r--r--  1 root root 120492 May  9 04:21 curl_man
lrwxrwxrwx  1 root root      3 May 10 06:04 ggit -> git
drwxr-xr-x 24 root root  12288 May  8 22:23 git
-rw-r--r--  1 root root  34177 May 10 03:12 info_ls
-rw-r--r--  1 root root  62156 May 10 19:44 man_tcpdump

而 ls -l --group-directories-first的内容类似:
total 244
drwxr-xr-x  2 root root   4096 May 10 22:02 123
drwxr-xr-x  2 root root   4096 Apr 28 01:26 Mysql
drwxr-xr-x 24 root root  12288 May  8 22:23 git
-rwxr-xr-x  1 root root     37 May  7 22:09 a.sh
lrwxrwxrwx  1 root root     13 May 10 05:54 abc -> git/version.c
-rw-r--r--  1 root root      0 May 10 05:38 a~
-rw-r--r--  1 root root 120492 May  9 04:21 curl_man
lrwxrwxrwx  1 root root      3 May 10 06:04 ggit -> git
-rw-r--r--  1 root root  34177 May 10 03:12 info_ls
-rw-r--r--  1 root root  62156 May 10 19:44 man_tcpdump
**.注意观察两个输出的首字符

--hide=PATTERN
不显示当前目录中匹配上shell
PATTERN的文件或是文件夹,行为和'--ignore=PATTERN'类似,但是如果还指定了-a/--all或
-A/--almost-all的话,--hide=PATTERN就不起作用了.文中还给了一个有用的例子，就是将lx设置为'ls
--hide='*~''的别名;将'ly'设置为'--ignore='*~''的别名，然后'lx
-A'会列出文件'README~'即使'ly -A'不会
-I PATTERN  --ignore=PATTERN
该选项和--hide=PATTERN用法类似，只是它和-a/--all或-A/--almost-all连用不会失效
例子:通过下面的输出来看--hide和--ignore的不同(前者碰上-a/--all或-A/--almost-all就相当于没有一样，而--ignore和-a/--all及-A/--almost-all更像是合作关系，取的是都满足后的数据)
    root@localhost:/home/yang# ls --hide='*~'
    123  Mysql  a.sh  abc  curl_man  ggit  git  info_ls  man_tcpdump
    root@localhost:/home/yang# ls --ignore='*~'
    123  Mysql  a.sh  abc  curl_man  ggit  git  info_ls  man_tcpdump
    root@localhost:/home/yang# ls --hide='*~' -a
    .   .info_ls.swp  123    README~  abc  curl_man  git      man_tcpdump
    ..  .swp          Mysql  a.sh     a~   ggit      info_ls
    root@localhost:/home/yang# ls --hide='*~' -A
    .info_ls.swp  123    README~  abc  curl_man  git      man_tcpdump
    .swp          Mysql  a.sh     a~   ggit      info_ls
    root@localhost:/home/yang# ls --ignore='*~' -a
    .   .info_ls.swp  123    a.sh  curl_man  git      man_tcpdump
    ..  .swp          Mysql  abc   ggit      info_ls
    root@localhost:/home/yang# ls --ignore='*~' -A
    .info_ls.swp  123    a.sh  curl_man  git      man_tcpdump
    .swp          Mysql  abc   ggit      info_ls
**.最后一点,--hide和--ignore都可以指定多次

-L --dereference
作用是对于ls输出的属性为链接文件所链接到的文件/文件夹的属性而非链接文件本身的属性，然而输出的信息中文件名称列仍然是符号链接的名称而非链接指向的文件名称
例子:
不加-L:
root@localhost:/home/yang/123# ls -l
total 0
lrwxrwxrwx 1 root root 14 May 10 21:58 git1 -> /home/yang/git
lrwxrwxrwx 1 root root 18 May 10 22:02 info_ls1 -> /home/yang/info_ls
加了-L:
root@localhost:/home/yang/123# ls -L -l
total 48
drwxr-xr-x 24 root root 12288 May  8 22:23 git1
-rw-r--r--  1 root root 34177 May 10 03:12 info_ls1

-R --recursive
递规列出所有文件夹的内容，注意的是输出格式:
以当前目录为起始，如./git/vcs-svn:
svn下的内容:   LICENSE  line_buffer.c  等等
例:
./git/vcs-svn:
LICENSE        line_buffer.c    repo_tree.c       sliding_window.h  svndump.c
fast_export.c  line_buffer.h    repo_tree.h       svndiff.c         svndump.h
fast_export.h  line_buffer.txt  sliding_window.c  svndiff.h

./git/xdiff:
xdiff.h   xemit.c       xinclude.h  xpatience.c  xtypes.h
xdiffi.c  xemit.h       xmacros.h   xprepare.c   xutils.c
xdiffi.h  xhistogram.c  xmerge.c    xprepare.h   xutils.h


