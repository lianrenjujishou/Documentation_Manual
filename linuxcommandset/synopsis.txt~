1.在执先脚本先一定要做的就是检查脚本是否有可执行权限

2.执行shell脚本的三种方式: 
    ./a	    #./命令后直接跟脚本名称不要有空格
    . a	    #点命令后跟着一个空格再加上脚本名称
    source a	#source命令后加空格再跟脚本名称,第二种点命令是它的简写形式

3.在脚本开头用#!来指定用来执行脚本的shell程序,并且被调用的程序可以带参数,如'#! /bin/sh'(需要注意的是这块不一定要是shell程序,什么程序都行,它的作用就是你指定哪个程序来执行它,如果你写的是'#! /bin/rm'则调用删除命令来执行脚本,其结果是脚本直接被删除)

4.在用./命令来执行脚本时会fork一个和父shell环境相同的子shell来执行它,当脚本执行后子shell消亡,在子shell中对环境的改变不会影响到父shell的环境;但是source命令或叫点命令执行脚本是直接在父shell中执行的,对shell环境的改变会一直保留直接shell关闭.

5.shell中的变量是一个键值对a=10,引用的时候在键前加上美元符号echo $a

6.变量名必须以字母或下划线开头,后面可接任意数量的字母数字及下划线,变量名对长度没有限制

7.所有的变量都是字符串类型的,但是如果变量的值是数值的话也是可以做算数操作的

8.变量名与值之间只有一个等号,等号两边不允许有空格,如变量值包含空格要将值用引号引起来.

9.变量的引用$后跟变量名,其实是${var}的简写形式,有些时候用$var会出错

10.双引号称为弱引用,单引号称为强引用;即双引号中的$var会被替换成值,成单引号中的$var就直接输出$var

11.变量可以不声明直接拿来用,一般未被赋值的变量系统认为是Null,如果用在算数运算中,则被认为是0

12.局部变量的作用域是代码块或函数中;全局变量的作用域是整个脚本;环境变量是全局变量,需要注意的是代码块或是函数中如果作为局部变量则声明时必须在前面加上local,否则直接赋值的话,即使是在函数或代码块中也被认为是全局变量

13.shell中常见的环境变量:HOME,PATH,LOGNAME,HOSTNAME,LANG,LANGUAGE,PS1,PS2,SHELL,HISTSIZE,MAIL等

------------------------------------------------------------------------
14.向脚本传递参数的方法就是在正常执行脚本的命令后跟一个空格再接参数,如'./test.sh
a b c'

15.脚本中的参数引用:$#:参数数量;$@:所有参数内容;$0,1...:脚本的参数名称,0表示脚本本身,如果是脚本中的函数调用了它,则0表示的还是脚本本身;$*:将所有的参数连成一个字符串显示;$$:显示运行当前脚本的进程id号;$!:shell运行的最后一个进程的id号;显示上一条命令退出状态;$_:显示shell使用的当前选项与set命令功能相同

16.如果参数多于9个的话就要特殊处理了,参数引用最大到$9,没有$10

17.参数的作用最直观的讲就是作为脚本中命令的参数,如有脚本a内容为:ps -eLf | grep
$1,然后我执行脚本'./a forfix',就相当于ps -eLf | grep 'forfix'

18.shell中#号后面的是注释,但前提#号不是某字符串的一部分

19.重定向符号>会将标准输出重定向到磁盘上的某个文件中,如果有同名名件存在,则会覆盖掉文件的内容;>>会将标准输出追加到磁盘上指定文件的尾部;还可以这样用a<b>c,意思为将b文件给a,a将处理结果重定向到磁盘上的c文件

20.利用|来创建管道,将|前面命令处理后的输出作为后面命令的输入

21.标准输入的文件描述符:0;标准输出的文件描述符:1;标准错误的文件描述符:2

22.注意/dev/下的null,zero,tty的使用方法,因为它们都是文件,所以用>/dev/x的方式是可以的,但是如果要用/dev/x的文件向其它文件写就必须找一个文本程序打开它,即cat
/dev/x > a是可行的,但/dev/x > a就不可行了.

23.接下来说/dev/null和/dev/zero,如果将文本流写入这两者是都啥也找不见了,但是如果从这两个文件读取文本流写入指定文件时就有区别了,cat /dev/null > a,就相当于清空a文件;但cat /dev/zero >a则是先清空然后向a里面写0,通常不能直接cat /dev/zero>a这样用,因为直接执行它相当于while 1:所以一般情况下是配合着能指定输出大小的命令一起用的,如dd(dd if=/dev/zero of=50M.file bs=1M count=50),可看dd的man

24./dev/tty

25.变量分为用户变量(像函数中的全局变量,以用local定义的局部变量),位置变量(就是脚本或函数调用的参数,即15条中说的那些),环境变量(像PATH等);再次强调变量赋值等号两边不能有空格!

26.像$等特殊符号在字符串中想原样输出必须用\进行转义

27.再重申$var是${var}的缩写形式,前文说位置变量不能用$10来引用,但可以用${10};书中举了一个$UID_的例子,拿变量的命名规范来说事,我觉得正常理解也应该将UID_看成是一个变量成不是UID看成变量,这不是明摆着的事嘛,你尝试着设置UID_=36,然后用$UID_也会显示36的.

28.{}又被称为字符串处理运算符,在它里面可以实现对字符串的一些操作,包括正则:具体的看书中表,另外比较奇怪的是不知它的正则是怎么样的,点在这里只匹配点而不是任一字符;记住了一定是从第一个字符就得匹配上,有点乱

29.接28说echo ${#var}会返回var中的字符个数,我们可以给字拆解成func() var:$# 

30.用反单引号可以将命令的返回值作为字符串输出,如 echo `pwd`

31.shift命令可以从参数列表中删除指定数量的参数,如果$#为8,在执行shift后$1被删除,$#的值为7,此时所有的参数都向前推一位,$4变成了$3等.并且shift可以带参数,shift
2表示删除两个参数,当然都是从最左边开始,具体的关于shift还没细看

32.用export将变量修改写到启动文件里可以永久修改环境变量,这里需要注意哪些启动文件对应哪些shell，还有export的用法

33.函数定义有两种方法：1.用function关键字后面加上函数名,函数名后的圆括号可有可无，然后将函数体用花括号括起来;2.不用function关键字,直接是函数名加上圆括号,此时的圆括号必须存在,然后函数体被花括号括起来

34.函数中的let后面的表达式表示的是算数运算,let可用双圆括号代替(()),具体可参见文章(http://blog.sina.com.cn/s/blog_a7b22c930101tfqo.html)

35.if语法if condition then statements [elif condition then statements][else
statements]

36.if条件中的或(||)与(&&)非(!)

37.test命令在if语句中作用非凡,可以用[]来替代，需要注意[]每个[或]两边都有空格

38.case语句的语法:
case expression in
    pattern1)
        statements;;
    pattern2)
        statements;;
    pattern3)
        statements;;
esac   注意,最后一个模式为*的话相当于if语句最后的那个else

39.for循环语法: 
for var [in list]
    do
      statements
    done   注意,如果省略in list部分则默认是in $@

40.while循环语法:
while condition
do
    statements
done

41.untile循环语法:
until condition
do
  statements
done

42.while true和until false的用法

43.break和continue的用语,基本上和C语言差不多，但shell中可以给二者传数字参数来控制跳出几层循环,这几层对于break和continue是不一样的,break是跳出大的循环,continue是跳过某个循环的几个小循环

