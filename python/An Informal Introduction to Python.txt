3.对Python的一个非正式的介绍
在下列例子中，输入和输出是以主提示符>>>和次提示符...的存在和不存在为特征的:为了重复这个例子,当提示符出现时后,你必须输入所有的东西;没有提示符的行显示的是解释器的输出.当次提示符单独出现在一行,后面啥也没有的时候,你也不要奇怪,这是因为在多行命令中必须以一个空行结束.在多行命令中只有命令的第一行的提示符是主提示符,其它行前都是次提示符,那么python通过什么来判断你这个多行命令是否全部输入完毕呢?比如说你已经输了三行了,并且已经输入完了,那么此时你回车,会在第四行出现一个次提示符,此时还能输入命令,但你没有输,而是直接回车,这样python就知道了,噢 你此时命令输入完了!

该手册中的许多例子,都是在交互模式下输入的,包括注释.python中#号后面的是注释,通过换行来结束该注释,即一个以#号开头的注释是以换行符来结束的.注释可以出现在一行的开头,好多空白的后面,代码的后面,但是位于字符串中的#后面的内容就不是注释了,而是字符串的一部分.什么叫位于字符串中呢?在Python中用单引号或双引号括起来的一般是字符串,所以通俗的来讲就是说位于引号中的#号后面的内容是字符串的一部分而不表示注释.由于注释是对所写代码的一个解释说明,所以python解释器在执行代码的时候会自动忽略掉这些注释.

几个例子:
    # this is the first comment
    spam = 1  # and this is the second comment
              # ... and now a third!
    text = "This is not a comment because it's inside quotes"

3.1. 将Python当作一个计算器
让我们尝试着输入一些简单的Python命令.首先我们打开Python解释器,等待着主提示符的出现,这个过程并不会花费太长时间
 3.1.1.数字
 这个解释器充当了一个简单的计算器:你能输入一个表达式,然后解释器会输出值.表达式的语法是很简单的:如我们平时常用的+,-,*,/输入符都可以使用,()表示里面的一起运算(官方译为分组),举例来说:
    >>> 2+2
    4
    >>> 50-5*6
    20
    >>>(50-5*6) / 4
    5.0
    >>> 8 / 5 #除法的返回值总是一个浮点数
    1.6
这些整数的类型为int,有小数部分的类型为float.在该教程中稍后我们会看到更多的数值类型
除法总是会返回一个浮点数.你可以用整除符号//来得到整型结果,用取余操作符%来得到除法中的余数
    >>> 17 / 3 类型除法返回的是一个符点数
    5.666666666666667
    >>> 17 // 3 # 整除直接将小数部分给去掉了就留了整数部分,注意没有四舍五入,是直接将小数给砍掉
    5
    >>> 17 % 3 # %返回了除法中的余数
    2
    >>> 5 * 3 + 2 
还Python中还可以用**操作符来进行幂操作
    >>> 5 ** 2 # 5的平方
    >>> 2 ** 7 # 2的7次方
等于号(=)用来给变量赋值
    >>> width = 20
    >>> height = 5 * 9
    >>> width * height
    900
如果一个变量没有定义直接,python用会报错:
    >>> n # try to access an undefined variable
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    NameError: name 'n' is not defined
在混合类型操作数的表达式中,结果都被转化为浮点型,说白一点就是在既有小数又有整数的运算中结果都是小数
    >>> 3 * 3.75 / 1.5
    7.5
    >>> 7.0 / 2
    3.5
在交互模式中,作为计算器使用的话,每次表达式输出的值都会被赋给_,比如我计算1+2,则此时_=3,我要还想用另外一个数6加上上次运算的结果的话直接6+_即可得到9,而不用再记住刚才的3.例:
    >>> tax = 12.5 / 100
    >>> price = 100.50
    >>> price * tax
    12.5625
    >>> price + _
    113.0625
    >>> round(_, 2)
    113/-6
这个变量对于用户来说应该是只读的.不要给_赋一个固定的值--如果赋予一个固定值不是不可以,但是这就丧失了_变量的强大的作用了,只能作为一个普通的变量来用了.
除了int和float,python还支持其它数字类型的变量,比如Decial 和
Fraction.Python.对于复杂的数值python还提供了内建的支持,如用j或J后缀来表示虚数部分(例如e.g. 3+5j).
3.1.2. 字符串
除了数字外,python也能够操作字符串,通常被单引号或双引号内的是字符串.反斜杠\可以用来转义引号:
    >>> 'spam' #单引号
    'spam eggs'
    >>> 'doesn\'t' #用反斜杠\来转义单引号
    "doesn't"
    >>> "doesn't" #如果字符串里面含有单引号就要用双引号给括起来,反之
    "doesn't"
    >>> '"Yes," he said.'
    '"Yes," he said.'
    >>> "\"Yes,\" he said."
    '"Yes" he said.'
    >>> '"Isn\'t, she said.'
    '"Isn\'t," she said.'
在交互式解释器中,要输出的字符串被单引号或双引号括起,特殊字符用反斜杠转义.有些时候输出的字符串和输入的字符串可能不同(主要是引号,可能有些情况输入的字符串被单引号括起,但输出时就变成双引号了,这个看例子自己总结),但是意思是完全一样的.如果要输出的字符串中包含单引号,但不包含双引号则要输出后用双引号括起,其它情况输出后都是用单引号括起.print()函数输出字符串的话,结果的可读性更强,具体体现就是:字符串最外层的引号没了,字符串内容中的转义字符不输出直接输出被转义字符,例'Isn\'t she said' print()后就是Isn't she said.
    >>> '"Isn\'t," she said.'
    '"Isn\'t," she said.'
    >>> print('"Isn\'t," she said.')
    >>> "Isn't," she said.
    >>> s = 'First line. \n Second line' # \n表示换行
    >>> s #没有print(), \n被包含在输出中
    'First line. \nSecond line.'
    >>> print(s) #有print() \n被解释为换行
    First line.
    Second line.
如果你不想将\后面的字符解释为特殊字符,你可以用raw字符串通过在第一个引号前加一个r:
    >>> print('C:\some\name') # 这里\n表示换行
    C:\some
    name
    >>> print(r'C:\some\name') # 注意字符串前面的r
    C:\some\name #说白了就是在print()函数中如果字符串前面加上r,则字符串中的所有字符都只是本身的意思
有两种方法可以实现将一个字符串写在多行.法一:字符串用'''开头,在最后一行用'''结尾即可,行尾含有\字符表示该行不换行,如果在'''前加上r,则字符串里面不会有特殊的东西
例子就略了
在字符串中可以用+号做连接字符串操作,可以用*号做重复字符串操作
    >>> # 下面是3个un后面跟着ium
    >>> 3 * 'un' + 'ium'
    'unununium'
两个及两个以上的字符串相互挨着写的话,输出时会被自动连接:
    >>> 'Py' 'thon'   # 相互挨着表示两个字符串之间除了空白不可以有其它的
    >>> 'Python'
上面这个自动连接的功能仅仅适用于普通字符串之间的连接,不适用于含有变量或表达式的情形:
    >>> prefix = 'Py'
    >>> prefix 'thon'    # 前面是变量prefix  后面是'thon'这种情况下就不适用
    SyntaxError: invalid syntax
    >>> ('un' * 3) 'ium' #这种情况也不适用,会报错
    SyntaxError: invalid syntax
如果你想连接变量和变量 或 变量和字符串,可以用+号:
    >>> prefix + 'thon'
    >>> 'Python'
两个字符串挨着写这个功能在长字符串中是非常有用的:
    >>> text = ('Put several strings within parentheses'
		'to have them joined together')
    >>> text
    'Put several strings within parentheses to have them joined together' #注意不能用'''来连接,'''会连换行也加上的
字符串也可以使用索引,且字符串中的第一个字符的索引为0:
    >>> word = 'Python'
    >>> word[0] #word这个变量中存储的字符串的第1个字符
    'P'
    >>> word[5] # word这个变量中存储的字符串的第6个字符
    'n'
索引值也可以是负数,不同的是这次是从右向左取字符:
    >>> word[-1] #注意和正向取不同的是,反向取的第一个字符是-1而不是0
    'n'
    >>> word[-2] #倒数第2个字符
    'o'
    >>> word[-6] #倒数第6个字符
    'P'
python中除了支持字符串索引来获取单个字符外,还支持字符串的分片(分片的数字中是包左不包右)来获取含有多个字符的子串:
    >>> word[0:2] #取word变量中存储的字符串的第0个字符和第1个字符
    'Py'
    >>> word[2:5] #取word变量中存储的字符串的第2,3,4个字符
    'tho'
注意,分片中总是包前不包后,这样才能确保s[:i] + s[i:]等于字符串s
    >>> word[:2] + word[2:]
    'Python'
    >>> owrd[:4] +word[4:]
    'Python'
分片中的开始位置和结束位置都有默认值,开始值被忽略的话默认是0,结束位置被忽略时默认是字符串的长度,也就是说取到字符串的最后一个字符
    >>> word[:2] # 从第0个字符取到第1个字符(还记得不包后呢吧)
    'Py'
    >>> word[4:] # 从第4个字符取到最后(结可位置值被忽略时,是既包前也包后,结束位置未忽略时是忽前不包后,谨记)
    'on'
    >>> word[-2:] # 从倒数第二个字符取到最后一个字符
    'on'
通过下面这个例子来理解记住分片是如何工作的,想想变量,变量中存的其实就是内容中的一个地址,引用变量时其实就是要找到这个地址的位置,下图可以引用一下变量的原理来理解
    +---+---+---+---+---+---+
    | P | y | t | h | o | n |
    +---+---+---+---+---+---+
    0   1   2   3   4   5   6
   -6  -5  -4  -3  -2  -1
对于分片的两个值都是正数的,并且两个值都没超出字符串长度的正常值,则分片的长度就是两个索引之差,如word[1:3]各到的子字符串长度就是2
如果索引值是大于字符串最大的正常值,则会报错,但是在分片中如果任一方的长度大于正常范围的值的话是不会报错的,处理结果就是分片的范围中如果含有字符串的正常范围值则将这部分值取出,如果分片的范围中不包含字符串正常范围的值,则返回一个空字符串，反正就是不会报错.
    >>> word[42] #这个索引太大了,故python抛出错误
    Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
    IndexError: string index out of range
    >>> word [4:42] # 在这个分片中虽然末值42远大于Python中的5,但是还是有一部分是和正常范围重合的,故会将范围重合的这部分的数据取出
    'on'
    >>> word[42:] # 这个起始值已经大于Python正常范围的最大值5了,所以两个范围没有重合的部分,故返回空字符串
    ''
Python中的字符串是不可变的,故不可以用索引的方式来改变字符串中的某个字符:
    >>> word[0] = 'J'
    ...
    TypeError: 'str' object does not support item assignment
    >>> word[2:] = 'py'
    ...
    TypeError: 'str' object does not support item assignment
如果你想要在已有字符串的基础上创建一个新的字符串,只能借助+和或*
    >>> 'J' + word[1:]
    'Jython'
    >>> word[:2] + 'py'
    'Pypy' #当然这里可以在前面加上一个变量来存储这个新字符串
可以用内建的len()函数来测量字符串的长度:
    >>> s = '012345'
    >>> len(s)
    6
还可以看一些相关的内容: Text Sequence Type -str,String Methods,String,Formatting,printf-style String Formatting
3.1.3. 列表
Python明白大量的数据类型用于将好多值聚到一块形成一个组.其中最常用的便是列表,列表的书写方式是列表中的值由逗号分开,最外面用方括号括起来,形如[1,2,3,4,5].列表中的数据可以是不同类型的,但是一般情况下里面存的数据的类型都是一样的.
    >>> squares = [1, 4, 9, 16, 25]
    >>> squares
    [1, 4, 9, 16, 25]
和前面讲过的字符串一样,列表也可以被索引和分片
    >>> squares[0]
    1
    >>> squares[-1]
    25
    >>> squares[-3:]
    [9, 16, 25]
对列表进行分片,返回的是一个新的列表(这个新的列表指的是在内存中和原列表不同的位置又划分一片空间存储这个新列表,而不仅仅是对原列表的一个指向),下例则是返回完整的源列表数据
    >>> squares[:]
    [1, 4, 9, 16, 25]
列表还支持连接操作:
    >>> squares + [36, 49, 64, 81, 100]
    [1,4 ,9, 16, 25, 36, 49, 64, 81, 100]
字符串的值是不可变的,但列表的值是可变的,可以通过分片或索引来改变列表的值:
    >>> cubes = [1, 8, 27, 65, 125]
    >>> cubes
    [1, 8, 27, 65, 125]
    >>> cubes[0]=10 # 通过索引改变列表元素的值
    >>> cubes
    [10, 8, 27, 65, 125]
    >>> cubes[1:3]=[80,270] #通过分片改变列表元素的值
    >>> cubes
    [10, 80, 270, 65, 125]
可以通过append()方法在列表结尾追加值
    >>> cubes.append(216)
    >>> cubes.append(7 ** 3)
    >>> cubes
    [10, 80, 270, 65, 125, 216, 343]
前面说过了可以用分片来修改列表的值,现在讲一下分片不仅可以修改值还可以通过将分片部分的值赋为空列表修改列表的大小:
    >>> cubes[1:3] = []
    >>> cubes
    [10, 65, 125, 216, 343]
    >>> cubes[:]=[] # 清空cubes列表
    >>> cubes
    []
len()函数不仅能测字符串的长度还可以测列表的长度(假设上面的列表没清空,还是[10, 65, 125, 216, 343]):
    >>> len(cubes)
    5
列表里的元素也可以是列表,即内嵌的列表:
    >>> cubes.append(['a', 'b', 'c'])
    >>> cubes
    [10, 65, 125, 216, 343, ['a', 'b', 'c']]
引用内嵌的列表时有点像多维数组了,比如说我要取出'c',我必须要知道大范围它是在cubes列表中的第6个元素中,故有cubes[5]得到['a', 'b', 'c'],还要知道它在这个数组中的位置是3,故最后取出'c'的表达式为: cubes[5][2]
3.2. First Steps Towards Programming
当然,Python能处理更复杂的任务,而不仅仅是处理像2+2这样的问题,下面我们来写一个Fibonacci序列:
    >>> # Fibonacci series:
    ... # the sum of two elements defins the next
    ... a, b = 0, 1
    >>> while b < 10:
...	print(b)
...	a, b = b, a+b
...
1
1
2
3
5
8
上面这个例子主要介绍了以下几个功能:
    1.第一行包含同时给多变量赋值.变量a和变量b同时得到值0和1.在最后一行又发生了同时给多变量赋值,想要表达的意思是最右边的表达式a+b的计算是在任何赋值行为发生前最先发生的.
    2.while循环的次数取决于条件b<10为为真的次数.在Python中,和在C语言中一样,任何非0的整数值都代表真;0代表假.这个条件也可以是一个字符串或是一个列表,实际上任何序列都行;任何长度不       是0的都代表真,空序列表示假.在测试中用到的条件是一个简单的比较.标准的比较操作符和C语言中的一样: <,>,==,<=,>=,!=
    3.while循环主体被被缩进了:缩进是Python用来对语句进行分组的方式.在交互式提示符下,你必须要为每一个缩进的行前键入Tab或是空格.在练习的时候,你应该多准备些复杂的文本;好的文本编辑器都有自动缩进功能.当你在交互式的Python环境下写复合语句的时候(跨行的),要用一个空行来表示你输入已经结束(因为解析器不知道你啥时候输完最后一行,所以有这么一个机制,一旦检测到有新行没输东西后直接回车就会知道你输完结束了).还需要注意的是一个语句块中的语句缩进数量必须是一样的,一个空格都得是一个空格,两个空格都得是两个空格
    4.print()函数打印值的时候,会去掉字符串两边的引号,并且有多个输出参数的时候,会自动在参数间加一个空格
	>>> i = 256 * 256
	>>> print('The value of i is', i)
	The value of i is 65536
print()函数中的参数end可以控制着行尾的结束符号,默认是换行
    >>> a, b = 0, 1
    >>> while b < 1000:
...	print(b, end=',')
...	a, b = b, a+b
...
1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987, 
Footnotes
由于**比-优先级高,-3**2会被解释为-(3**2),结果为-9.为了避免这种情况得到想要的值9,你可以写成(-3)**2
不像其它语言,python中特殊字符\n在单引号和双引号中的意思一样.唯一不同的就是在单引号中你不必转义双引号(但你要转义单引号)同样你在双引号中也不必转义单引号(但要转义双引号)
