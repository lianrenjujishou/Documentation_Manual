14.3 'stat':报告文件或文件系统状态
-----------------------------------
-----------------------------------
'stat'显示指定文件的信息.概要:
    stat [OPTION]... [FILE]...

没有选项的情况下,'stat'报告关于给定文件的所有信息.但是该命令也用来报告给定文件所在的文件系统的信息.如果文件是链接,'stat'也能给出关于链接所指文件的信息.

由于shell别名和内建的'stat'函数,交互使用一个朴素的'stat'或在一个脚本中可能使你得到不同的功能比在这描述的.通过'env'调用它(i.e.,'env'
stat ...')为了避免来自shell的冲突.

'-L'
'--deference'
    改变'stat'如何对对待符号链接.带有该选项,'stat'对由每个符号链接参数引用的文件起作用.没有该参数,'stat'直接对任何符号链接参数起作用.

'-f'
'--file-system'
    报告给定文件所在文件系统的信息来代替报告指定文件本身的信息.该选项隐式地有个'-L'选项.

'-c'
'--format=FORMAT'
   使用FORMAT而不是默认的格式.FORMAT自动地用新行来结尾,因此运行一个像下面的命令带有两个或是多个FILE操作数,对于每个操作数产生一个输出行(改前为:产生一个输出行对于每个操作数):
        $ stat -- format=%d:%i / /usr
        2050:2
        2057:2 

'--print=FORMAT'
    使用FORMAT而不是默认的格式.类似于'--format',但是解释反斜杠转义,并且不输出一个强制的新行拖尾.如果你想要一个新行,在FORMAT中包含'\n'.
    下面是你如何使用'--printf'来打印'/'和'/usr'的设备和索引节点号:
        $ stat --printf='%d:%i\n' / /usr
        2050:2
        2057:2

'-t'
'--terse'
    使用简洁的格式来打印信息,对于通过其它程序解析是合适的

对于给定(支持)'--format'和'--printf'参数的文件下面是有效的FORMAT指令:
%a - 用八进制表示访问权限
%A - 用人类可读的格式显示访问权限
%b - 被分配块的数量(看'%B')
%B - 用bytes表示由'%b'报道的每个块的大小
%C - 如果是有效的,一个文件的SELinux安全上下文
%d - 用十进制表示的设备号
%D - 用十六进制表示的设备号
%f - 用十六进制表示的Raw模式
%F - 文件类型
%g - 拥有者的组ID
%G - 拥有者的组名
%h - 硬链接的数目(号?)
%i - 索引节点号(number是翻译为号还是翻译为数?)
%m - 挂载点(看下面的注释)
%n - 文件名
%N - 如果是符号链接,被引起来的文件名伴随着废弃(Quoted file name with dereference if symbolic link)
%o - 最佳的I/O传输大小提示
%s - 用bytes表示总大小
%t - 用十六进制表示主要设备类型(看下面)
%T - 用M十六进制表示次要设备类型(看下面)
%u - 拥有者的用户ID
%U - 拥有者的用户名
%w - 文件出生的时间, 如果是未知的则用'-'表示
%W - 文件出生的时间按照秒自从Epoch(新纪元)
%x - 最后的访问时间
%X - 最后的访问时间按照秒自从Epoch(新纪元)
%y - 数据最后的修改时间
%Y - 数据最后的修改时间按照秒自从Epoch(新纪元)
%z - 最后状态改变时间
%Z - 最后状态改变时间按照秒自从(新纪元)

'%t'和'%T'格式操作在stat(2)结构的st_rdev号上,并且仅仅为了字符和块特殊文件被定义.在一些系统或是文件类型上,st_rdev可以被用来表示其它的数量.

'%W','%X','%Y'和'%Z'格式接受一个精密度被一个周期领先为了指定要打印的数字的数量在小数点之后.例如,'%.3X'输出最后的访问时间到毫秒精度.如果一个周期被给出但是没有精度,'stat'使用9个数字,因此'%.X'等价于'%.9X'.当丢弃精度,时间戳被截短朝着负的无穷大.

    zero pad:
        $ stat -c '[%015Y]' /usr
        [000001288929712]
    space align:
        $ stat -c '[%15Y]' /usr
        [     1288929712]
    $ stat -c '[%-15Y]' /usr
        [1288929712     ]
    precision:
        $ stat -c '[%.3Y]' /usr
        [1288929712.114]
        $ stat -c '[%.Y]' /usr
        [1288929712.114951834]

被'%m'打印的挂载点类似于'df'的输出,
除了:
~默认情况下stat不废除符号链接(除非'-L'被指定)
~stat不搜索在文件系统列表中指定的设备节点,反而(instead)直接在它们上操作
~stat为一个绑定挂载文件输出别名,而不是它的backing设备的初始化挂载点.One能够递归调用stat直到在输出上没有改变,为了得到当前的基本挂载点

当列出文件系统信息('--file-system'('-f')),你必须使用FORMAT指令的一个不同设置(set,集合?)
%a - 空闲的块对于非超级用户来说是有效的
%b - 在文件系统中的总数据块
%c - 文件系统中的总文件节点
%d - 文件系统中的空闲文件节点
%f - 在文件系统中的空闲块
%i - 用十六进制表示文件系统ID
%l - 文件名的最大长度
%n - 文件名
%s - 块大小(为了较快的传输)
%S - 基本的块大小(对于块数)
%t - 用十六进制表示类型
%T - 用人类可读的格式表示类型

时间戳列出根据被'TZ'环境变量指定时区规则,或者通过系统默认规则,如果'TZ'没有被设置.*注意用'TZ'指定时区:(libc)TZ变量.

退出状态0表示成功,非0值表示失败.
