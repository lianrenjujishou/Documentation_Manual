                                  xbmcaddon(16.x-jarvis)
Classes
__builtin__.object
  Addon

class Addon(__builtin__.object)
    Addon class.
    Addon([id]) -- Creates a new Addon class.
    id : [opt] string - id of the addon as specified in addmon.xml
    *Note, specifying the addon id is not needed.
    Important however is that the addon folder has the same name as the addon id provided in addmon.xml
    You can optionally specify the addon id from another installed addon to retrieve settings from it.
    example:
        - self.Addon = xbmcaddon.Addon()
        - self.Addon = xbmcaddon.Addon ('script.foo.bar')

Methods defined here:

getAddonInfo(...)
    getAddonInfo(id) -- Returns the value of an addon property as a string.
    id : string - id of the property that the module needs to access.
    *Note, choices are (author, changelog, description, disclaimer, fanart, icon, id, name, path, profile, stars, summary, type, versiong)
    example:
        - version = self.Addon.getAddonInfo('version')

getLocalizedString(...)
    getLocalizedString(id) -- Returns an addon's localized 'unicode string'.
    id : integer - id# for string you want to localize.
    example:
        - locstr = self.Addon.getLocalizedString(32000)

getSetting(...)
    getSetting(id) -- Returns the value of a setting as a unicode string.
    id : string - id of the setting that the module needs to access.
    example:
        - apikey = self.Addon.getSetting('apikey')

openSettings(...)
    openSettings() -- Opens this scripts settings dialog.
    example:
        - self.Addon.openSettings()

setSetting(...)
    setSetting(id, value) --Sets a script setting.
    id : string - id of the setting that the module needs to access. value : string or unicode - value of the setting.
    *Note, You can use the above as keywords for arguments.
    example:
        - self.Addon.setSetting(id='username', value='teamxbmc')
-----------------------------------------------------------------------
Data and other attributes defined here:

__new__ = <built-in method __new__ of type object>
    T.__new__(S, ...) -> a new object with type S, a subtype of T

Data

__author__ = 'Team Kodi <http://kodi.tv>'
__credits__ = 'Team Kodi'
__date__ = 'Sat Oct 24 10:35:33 BST 2015'
__platform__ = 'All'
__version__ = '2.23.0'
