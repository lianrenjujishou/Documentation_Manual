***.模块的搜索路径一块没翻译完,其它翻译的也是云里雾里,这篇文章需一点一点的根据实例结果去补全修改,慢慢来吧!
6.模块
如果你从Python解释器退出然后又进去,你之前定义的内容(如函数和变量)就会丢失.因此,如果你想要写个长点的程序,你最好使用文本编辑器写个文件,然后运行该文件.大家都知道这个所谓的文件就是脚本.当你的程序变得越来越长的时候,你可能想要将这个程序分成几部分,这样更便于维护.你可能也想将你写好的函数不用拷贝该函数的定义直接就应用到其它的程序中.

为了支持上面所说的,Python提供了一种方式,将你要用到的函数等信息放入一个文件,然后在脚本中或是交互模式中使用它.这个文件被称为模块;模块中的定义可以被导入到其它的模块中或是被导入到main模块(main模块就是在你访问一个脚本时最先访问的那个地方,该地方是一个包含变量的集合,或者是当你在使用calculator模式时(查了一下这个计算器模式应该指的就是交互模式:interactive
mode)也会使用这个变量集合)

所谓模块就是包含有Python定义和语句的文件.文件名就是模块名后面加上.py后缀.在模块中,模块名(字符串)被赋给全局变量__name__.例如,在当前目录下用你喜欢的文本编辑器来创建一个被称为fibo.py的文件,文件内容如下:
-------------------------------------------------
# Fibonacci numbers module

def fib(n):	# 定义一个到n的Fabonacci序列的函数
    a, b = 0, 1
    while b < n:
	print(b, end=' ')
	a, b = b, a+b
    print()

def fib2(n):	#返回一个到n的Fabonacci序列列表的函数
    result = []
    a, b = 0, 1
    while b <n:
	result.append(b)
	a, b = b, a+b
    return result
------------------------------------------------
现在进入python解释器,然后输出下面的命令来导入模块:
>>> import fibo
如果仅仅导入的是模块名则使用模块中函数的时候要在函数名前面加上模块名,即module.func()的形式,而不是直接使用module中的func().例如:
>>> fibo.fib(1000)
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
>>> fibo.fib2(100)
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
>>> fibo.__name__
'fibo'
如果你经常使用某个函数,如fib(),在直接导入该函数所在模块的情况下,即import fibo,你每次都要fibo.fib()这样引用是很麻烦的,所以你可以给fibo.fib()设置一个别名,以后直接引用该别名即可(其实可以直接用from fibo import func来导入函数,使用时就不用再加模块名了,但这也有一个不好的地方,如果导入的模块多了,不同的模块之间有相同的函数名,就会冲突发生错误):
>>> a = fibo.fib
>>>a(500)
1 1 2 3 5 8 13 21 34 55 89 144 233 377

6.1.进一步了解模块
一个模块不仅可以包含可执行语句而且还可以包含函数定义.模块中的语句目的是初始化这个模块.这些语句(还是不仅是语句还有模块中的函数)仅仅在模块第一次用import导入时执行一次.这些模块也可以被作为脚本执行.

每个模块都有它私有的符号表,这些符号表被用作定义在模块中所有函数的全局符号.因此模块的作者可以在模块中使用全局变量而不用担心和用户自定义的全局变量冲突.另一方面,如果你知道自己在做什么你可以使用(这里我翻译为使用,文中用的是touch)和上面提到过的调用模块中函数的方法来使用变量modname.varname.

模块中也可以导入模块,import语句不是必须放在文件的开头,被导入的模块名位于导入模块的全局符号表中(解释:比如有两个模块A和B,现在A中需B中的内容,所以我就在A中写一个import
B的语句,一般这条语句都是在A文件最开头,但是如果我们引用B模块的内容是在中间,我们也可以不在开头写import B,而在中间的位置,只要是用到B模块中内容的语句之前import B就行;被导入的模块B的名称位于A模块的全局符号表中).

import语句的变体,可以直接将被导入模块中的函数等直接导入需求模块的符号表,此时再引用fib和fib2时就不用前面再带着模块名称了,要和直接import fibo区别开.例如:
>>> from fibo import fib, fib2
>>> fib(500)
1 1 2 3 5 8 13 21 34 55 89 144 233 377
从上例可以看出我们没有引进模块,而是根据模块名直接将fib和fib2引入了本地符号表(因此在这个例子中，fibo模块没有被定义)
还有另一种import的变体,可以将模块中的所有内容都导入到本地符号表(同样也是模块名在本地符号表中没有定义):
>>> from fibo import *
>>> fib(500)
1 1 2 3 5 8 13 21 34 55 89 144 233 377
用from 模块名 import *的这种方法可以将除以_开始的模块中的所有类型数据.大多数情况下,我们不会使用这种方式,因为这种方式会引入了一个未知的名称集合到解释器,可能会覆盖之前你已经定义好的变量或函数,但是我们可以用它来保存交互式会话中我们键入的内容(如何保存?).

注意:由于效率的原因,每个模块在每个会话中仅仅被导入一次.因此,如果你已经改变了你导入模块的内容,你必须要重启解释器-或者,如果那个模块仅仅是你想要测试的一个模块,可以用imp.reload()来重载该模块,如:
import imp
imp.reload(modulename)

6.1.1.将模块作为脚本执行
当你用'python fibo.py <arguments>'
来运行一个模块的时候,模块中的代码会被执行的原因不是因为你导入了它,而是因为检测到了模块中的__name__变量被设置为"__main__".所以如果想让fibo.py模块也可以像脚本一样执行的话,需要在模块的最后加上:
if __name__ == "__main__":
    import sys
    fib(int(sys.argv[1]))
举一反三,对于其它的模块也是一样的,第一行都是if __name__ == "__main__":	第二行也是import sys 第三行具体你想引用模块中的哪个模块,还有哪个参数就按实际情况去写就好.
当模块中有了上面这几句话后,它就既可以当模块用,即用import将其导入;也可以作为脚本执行,即利用在shell模式下:'python 模块名.py [参数]'(解析命令行的代码只有在文件被作为main文件时,才会运行该文件.)
python fibo.py 50
1 1 2 3 5 8 13 21 34
如果文件被导入,则模块中的代码不会被运行:
>>> import fibo
加上那三句话后,目的通常是在模块上给用户留一个接口或是为了测试用

6.1.2.模块的搜索路径
当一个名为spam的模块被导入时,解释器首先会从内建的模块中查找,看看有没有叫spam的.如果没找到,然后会从sys.path给定的一系列目录中查找是否有名为spam.py的文件.

6.1.3.编译Python文件
为了更快的加载模块,python会以module.version.pyc为名字将模块编译后存在__pycache__目录下,;它通常含有Python的版本号.例如,在CPython3.3版本中,spam.py的编译版本被存储在__pycache__/spam.cython-33.pyc.这种命名约定允许被多个Python版本编译的模块共存(指的是如果有一个模块A,系统里同时装了python3.4和python3.3则在__pycache__目录下会有两个不同名称的A模块)(感觉最后一句翻译的不对,原文是This naming convention allows compiled modules from different releases and different versions of Python to coexist,这里面应该不仅有不同的Python版本,感觉应该还有不同的模块版本,后期求证吧).

Python会检查源文件的修改日期和编译文件的日期对比以后决定是否应该重新编译文件了.这个检查与是否重编译的过程是完全自动的.成且被编译的模块是不依赖于特定平台的,因此相同的库可用在不同架构的系统上.

在两种情况下Python不会检查缓存目录.第一种情况是Python不存储从命令行加载的模块的编译结果,故每次用到该模块时都要重新编译.第二种情况是如果没有源模块,Python也不会检查缓存目录.为了支持没有源文件的版本(仅仅有编译版),这个被编译的模块一定要在源文件目录,并且一定不能有源文件模块(就相当于我把模块编译后把模块删掉了,但模块的编译版本不放在__pycache__目录下,而是直接放在模块源目录下)

专家的一点建议:
    1.你可以在Python命令中使用-O或是-OO开关来减少编译模块的体积.-O开关会移除断言语句,-OO开关会移除断言语句和__doc__字符串.因为有一些程序对断言语句或__doc__字符串有依赖,所以你      在使用-O和-OO选项之前一定要明白自己在做什么.被优化过的模块通常有一个opt-标志,并且被优化过的模块体积通常要比优化之前要小.Python以后的发行版可能会减小优化选项所产生的影响.
    2.程序运行的速度和你是从a.pyc读取的还是从a.py中读取是没有关系的,a.pyc影响的只是程序加模模块的速度,而模块加载后运行的速度二者是一样的.
    3.compileall模块可以在同一目录下为所有的模块创建.pyc文件.
    4.在PEP 3147中,有更多关于模块编译的信息,而且还有相应的流程图(后半句翻译不是很准原文,including a flow chart of the decisions)

6.2.标准模块
Python提供了一个标准的模块库,单独有一章介绍了这些标准模块.有一些模块是Python解释器内建的;它们提供的操作不是Python的核心部分,但是它们通常更有效率或者是可以调用系统上的一些参数,这些内建的模块也是依赖于平台的.例如winreg模块只对windows有效.有一个命令比较值得关注:sys,这条命令是每一个Python解释器都内置的.sys.ps1和sys.ps2用来定义主提示符和次提示符:
>>> import sys
>>> sys.ps1
'>>>'
>>> sys.ps2
'...'
>>> sys.ps1 = 'C>'
C> print('Yuck!')
C>
这两个变量仅仅用于交互模式中,其实在脚本中也可能用,但是如果没有交互的话没有意义,因为重启后又会恢复成原来的,即只是临时改变了主次操作符.

sys.path里存放的是Python搜索模块时的搜索目录组成的列表.默认情况就是从PYTHONPATH变量中取的值,如果PYTHONPATH变量不存在sys.path取的就是python内建的默认值.你可以用相应的列表操作函数去修改sys.path:
>>> import sys
>>> sys.path.append('/ufs/guido/lib/python')

6.3. dir()函数
内建的dir()函数用来找出模块都定义了哪些名字,它返回的是一个排过序的字符串列表:
>>> import fibo, sys
>>> dir(fibo)
['__name__', 'fib', 'fib2']
dir()不加参数的情况下返回的是你当前已经定的的名字(应该就是本地符号表里的那些东西):
>>> a = [1, 2, 3, 4, 5]
>>> import fibo
>>> fib = fibo.fib
dir()
['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']
需要注意的是dir()在不加参数的情况下列出了所有类型的参数:变量,模块,函数等
默认情况下dir()不会将内建的函数及变量的名字列出来,但是如果你想看到内建的一些名称列表,可以用dir(builtins)


6.4.包
包是利用"dotted module names"来构建Python的模块空间的一种方式.例如,A.B指定了A包里的B模块.不知说啥了,大概意思是说每个模块都有自己的一块存东西的地方,即使有不同的模块那块地方有某些变量或是函数名相同也没关系,因为引用的时候用了.符号,表示所属,即A.x和B.x引用的是不同的地方,虽然都叫x，但一个是A家的x，一个是B家的x。

假如你想要为声音类型的文件和数据的统一处理设计一个模块的集合(可以称为一个包).有好多不同的声音文件格式(这些声音文件都常靠它们的扩展名进行识别,如.wav,
.aiff,
.au),因此你可能需要在不同文件格式的转换创建并维护一个不断增长的模块集合.有许多不同的操作,你可能要操作声音数据(如混合,添加回音,使用均衡器,创造一个人造立体声效果),除此之外你还会写一个从来不会结束的模块来处理这些操作.下面是对上面的描述所构想的一个包(用层级结构表达的):
sound/                          Top-level package
      __init__.py               Initialize the sound package
      formats/                  Subpackage for file format conversions
	      __init__.py
              wavread.py
              wavwrite.py
              aiffread.py
              aiffwrite.py
              auread.py
              auwrite.py
              ...
      effects/                  Subpackage for sound effects
              __init__.py
              echo.py
              surround.py
              reverse.py
              ...
      filters/                  Subpackage for filters
              __init__.py
              equalizer.py
              vocoder.py
              karaoke.py
              ...
当导入包的时候,python根据sys.path提供的目录搜索包的子目录.
__init__.py文件的目的是让Python认为该目录中含有包;this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path最简单的情况,__init__.py可以仅仅是一个空文件,但是它也能够为包执行代码或者是设置__all__变量,稍后将描述.    

用户可以从包中导入单个模块,例如:
import sound.effects.echo
加载的子模块sound.effects.echo.引用它的时候必须是完整路径引用
sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)
另一种导入子模块的方式是:
from sound.effects import echo
这种情况导入的模块调用时不需要加包前缀:
echo.echofilter(input, output, delay=0.7, atten=4)
还有另外一种导入的变体就是直接导入需要的函数或变量:
from sound.effects.echo import echofilter
再调用echofilter()函数时,直接调用函数即可:
echofilter(input, output, delay=0.7, atten=4)

注意,当使用from package import
item时,item可以是一个包的子模块(或是子包),也可以是包内定义的其它名子,像函数名,类名或者变量名.import语句首先会测试是否指定包中有没有定义item;如果没有,import语句会尝试着将item作为模块并尝试着加载它.如果什么都没找到,会抛出一个ImportError错误.

相反地,当使用像import item.subitem.subsubitem这样的语法时,除了最后一个条目外,其它的item都必须是一个包;最后一个item可以是一个模块或是一个包,但是不能是定义在上一级的一个类或是函数或是变量

6.4.1. 从一个包里导入* (Importing * From a Package)
现在当用户键入from sound.effects
import后会发生什么呢?按理说,发现哪个子模块存在包里,并将它们全部导入.全部导入会发费很长一段时间并且导入的子模块可能有我们不想要的

唯一的解决方案就是为包的作者提供一个精确的包索引.import语句使用下面的约定:如果一个包的__init__.py代码中定义了一个名字为__all__的列表,当输入from package import *时,你应该导入模块名称列表中的名字.当一个新包发布时,由包的作者负责更新这个列表到最新.如果没有人使用import * from * package的形式导入的话,作者也可以不对该列表作更新.例如,文件sound/effects/__init__.py中应该包含下面的代码:
__all__ = ["echo", "surround", "reverse"]
这意味着from sound.effects import * 将会从sound包中导入上面列表中的三个子模块

如果__all__没有被定义,则语句from sound.effects import *
不会从包sound.effects中导入所有的模块到当前的名称空间;而是仅仅保证了包sound.effects已经被导入进来(可能在__init__.py文件中运行任何的初始化代码),然后会将包中定义的所有名字都导入进来.这些名字(明确加载的子模块)包括通过__init__.py定义的.这些名字还包括前面被import明确加载的包的子模块.考虑以下代码:
import sound.effects.echo
import sound.effects.surround
from sound.effects import *
在这个例子中,echo 和surround模块都被导入了当前的名称空间,因为当执行from ... import语句时他们被定义在sound.effects包中(这同样适用于当__all__被定义时)

Although certain modules are designed to export only names that follow certain patterns when you use import *, it is still considered bad practise in production code.

记住,使用from Package import specific_submodule没有错!实际上,如果不是导入的模块需要使用 和 不同包 名称相同的子模块的话,是推荐用这种方法的.(比如有两个包A和A1,里面都有名为module子模块名,这样我们导入的时候如果是from A import B 和from A1 import B,后导入的B会覆盖掉之前导入的B)(被调用者)

6.4.2.内部包的引用
当一个包是由分包组成的时候(正如上例中的sound包),你可以使用绝对导入来参考同级的包.例如,如果模块sound.filters.vocoder需要使用sound.effects包中的echo模块,可以在vocoder模块中写上from sound.effects import echo

你也可以用from ./.. import name语句写相对导入,比如在surround模块中,我们可以这样写:
from . import echo
from .. import formats
from ..filters import equalizer
注意,相对导入是基于当前模块名字的.因为主模块的名字总是"__main__",所以一个Python应用中的模块如果想要作为主模块,就必须使用绝对导入

6.4.3.多个目录中的包
包支持的另一个特殊属性是__path__.在__init__.py文件中的代码执行前,__path__里存放的是包中__init__.py文件的目录列表(如前面看到的一个大包里不只一个__init__.py文件).这个变量是可以修改的;如果修改了这个变量会影响将来对包中模块及子模块的搜索.

__path__可以用来扩展当前包中的模块集,但是并不常用.

注脚:实际上函数定义也是"可执行的""语句";一个模块级别的函数定义的执行是通过在模块的全局符号表中输入函数名称
