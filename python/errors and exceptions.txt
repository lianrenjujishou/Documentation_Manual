**.感觉异常都是先有抛出(raise)再有捕获的(这里捕获用的是except非catch),我们平时的语法错误啥的应该是程序封装时把错误语句写到程序里了，if。。。则raise xxxexception,而我们自己要自定义的话，必须要在try和except之间有raise xxxexception才可以在except中捕获该异常进而执行相应的语句
8.错误和异常
到现在为止我们还没有过多的提及有关错误信息的问题,但是如果你已经自己尝试着运行之前几章中遇到的例子的话,你会至少发现有两种不同类型的错误:语法错误和异常.(上一个逗号官文中用的是句号,但是翻译下来感觉应该用逗号才对)

8.1.语法错误
语法错误也就是我们所谓的解析错误,这也是当你学习Python过程中最常遇到的错误类型:
>>> while True print('Hello world')
  File "stdin", line 1, in ?
    while True print('Hello world')
		   ^
SyntaxError: invalid syntax
解释器会打印出最早检测到错误的行并用一个向上的小箭头指出错误出现在什么位置.错误通过键头前面的token(记号)引起的.在这个例子中,错误在print()函数的位置被检测到,由于在token之前缺少了一个冒号.文件名和行号会被打印出来因此你可以知道错误是来自输入脚本的什么位置.(这个token在此例中指的是print这个字键字,还是指缺失的那个冒号呢?应该是冒号吧)

8.2.异常
即使一条语句或是一个表达式的语法是正确的,但是当我们尝试着去执行它们的时候也有可能会发生错误.在执行的过程中被检测到的错误我们称它为异常并且该异常不是完全致命的:稍后你将会学到如何在Python程序中处理这些异常.大多数的异常不会被程序处理,可是,会将错误信息显示出来:
>>> 10 * (1/0)
Trackback (most recent call last):
  File "<stdin>", line 1, in ?
ZeroDivisionError: division by zero
>>> 4 + span*3
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
NameError: name 'spam' is not defined
>>> '2' + 2
Traceback (most recent call laste):
  File "<stdin>", line 1, in ?
TypeError: Can't convert 'int' object to str implicitly
错误信息的最后一行表明发生了什么错误.异常来自不同的类型,并且该类型被作为错误信息的一部分打印出来:在这个例子中的类型是ZeroDivisionError,NameError和TypeError.作为异常类型被打印出来的字符串是内建的异常被触发时显示的名字.这适用于所有的内建异常,但是不需要对用户自定义的异常也适用(尽管它是一个非常有用的约定).标准的异常名称是内建的标识符(不是保留的关键字).

剩下的行提供了详细的基于异常类型和什么引起的信息.
错误信息之前的部分说明了异常发生的位置,用的是栈追踪的形式.通常它包含了一个列出了源错误行的栈追踪;但是不会显示来自标准输入的源错误行(就是说如果是运行的一个脚本中某一行有错误,则在错误信息中会将错误行原样的也输出作为错误信息的一部分,但是如果是我们交互式输入的,则错误信息中将不会包含错误行的内容)

Built-in Exceptions列出了内建的异常和其表示的相关含义.

8.3.处理异常
我们在写程序的时候可以处理被选择的异常.看下面这个例子,让用户输入直到输入了一个有效的整型数,但是允许用户中断这个程序(使用Control-C或者是所在操作系统平台支持的其它中断快捷键);注意,我们是通过系统抛出一个KeyboardInterrupt异常来得知是由用户中断的程序(比如程序正在运行,我们在键盘上按下Control-C后程序会终止运行,并显示一个KeyboardInterrupt,所以以后再看到以KeyboardInterrupt结尾就可以知道这不是程序自己正常停止的,而是用户中间用键盘干预导致程序的非正常终止).
>>> while True:
...  try:
...    x = int(input("Please enter a number:"))
...    break
...  except ValueError:
...    print("Oops! That was no valid number. Try again...")
...
try语句是按照如下流程工作的:
  首先,try从句(指的是try和except之间的句子)被执行.

  如果没有异常发生,则except从句(指的是属于except的子句)被跳过然后try语句执行完成

  如果在执行try从句的时候发生了异常,则try从句中剩下的将被跳过执行.然后如果try从句中发生的异常类型匹配上了except关键字后面的名称,except后面的从句将会被执行,try语句执行完毕后继   续向下执行

  如果发生的异常没有匹配上except后面的名称,则这个异常会被传递到外部的try语句;如果外部也没有发现有能处理异常的部分,则该异常就是一个未被处理的异常然后程序就会停止执行并且输出一   条和上面差不多的一条错误信息.

一个try语句可能会有多条except从句,目的是为了指定多个处理器来处理不同的异常.但是最多只有一个处理器会被执行.处理器只处理发生在相应try语句中的异常,而不会说在A try语句中发生了异常由B try语句中的except异常处理器去处理.一个except从句可以命名多个异常名称,多个异常名称作为一个被圆括号括起的元组存在,例如:
... except (RuntimeError, TpeError, NameError):
...   pass

这块忽略了一块当时没有想明白的，就不在这里补了去看一下classes.txt中的9.8已做了注释

最后一个except从句可能会忽略异常的名称,目的是为了服务一个通配符(应该有点像if语句的最后那个else的意思).使用使用这个要特别的小心,因为它很容易就会掩盖了一个真正的程序错误!它也可以被用来打印一条错误信息然后重新抛出一个异常(也允许调用者来处理这个异常):
import sys
try:
  f = open('myfile.txt')
  s = f.readline()
  i = int(s.strip())
except OSError as err:
  print("OS error: {0}".format(err))
except ValueError:
  print("Could not convert data to an integer.")
except:
  print("Unexpected error:", sys.exc_info()[0])
  raise
try ... except语句有一个可选的else从句,如果该else从句出现的话,一定是位于所有except从句的后面.它对于必须要执行的代码来说是有用的,如果try从句没有抛出一个异常.例如:
for arg in sys.argv[1:]:
  try:
    f = open(arg, 'r')
  except IOError:
    print('cannot open', arg)
  else:
    print(arg, 'has', len(f.readlines()), 'lines')
    f.close()
else语句的使用比添加额外的代码到try从句中要好,因为用else的话避免了意外捕获由try...except语句保护的代码抛出的异常.

except从句可以在异常名称后面指定一个变量(如下面except ValueError as ve中的ve).这个变量(ve)被绑定到一个带有参数的异常实例上，异常参数存储在instance.args中(ve.args).为了方便起见，异常实例定义了一个__str__()方法,因此我们可以直接利用instance.__str__()(ve.__str__())方法打印抛出异常时传递给异常的参数(这个逗号应该错了，直接打印instance就相可以了，因为打印实例名称可能会默认调用__str__()参数)，而不必非得用instance.args(ve.args).有一种方式也可以在抛出该异常之前初始化这个异常并且在初始化时给该异常赋任何你期望的值或是键值对(_init__(self, /, *args, **kwargs)).
>>> try:
...   raise Exception('spam', 'eggs')
... except Exception as inst:
...   print(type(inst))	  #打印异常实例
...   print(inst.args)	  #打印存储在实例中的参数
...   print(inst)   #__str__允许参数被直接打印,但是可能在异常子类中被覆盖
...
...   x, y = inst.args	  #解包参数
...   print('x = ', x)
...   print('y = ', y)
...
<class 'Exception'>
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs
如果异常有参数,这些参数将会被作为未处理异常的最后一部分信息('detail')被打印出来.

异常处理器不仅仅只处理try从句中定义的语句产生的异常,如果try从句中调用了外部的函数引发了异常,该try语句中的异常处理器也同样会处理.例如:
>>> def this_fails():
...   x = 1/ 0
...
>>> try:
...  this_fails()
... except ZeroDivisionError as err:
...  print('Handling run-time error:', err)
...
Handling run-time error: int division or modulo by zero

8.4.抛出异常
raise语句允许程序员强制让一个指定的异常发生.你如:
>>> raise NameError('HiThere')
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
NameError:HiThere
raise仅有的参数就是要抛出的异常.这个参数是一个异常实例或者是一个异常类(一个来自Exception的类).

如果你需要决定是否要将异常抛出而不去处理它的话,一个最简单的raise语句的形式允许你重新抛出这个异常:
>>> try:
  raise NameError('HiThere')
except NameError:
  print('An exception flew by!')
  raise

An exception flew by!
Traceback (most recent call last):
  File "<stdin>", line 2, in ?
NameError:HiThere

8.5.用户自定义异常
程序可以通过创建一个新的异常类来命名自己的异常(有关类的相关信息可以查看classes一章).异常典型地应该直接或间接来自Exception类,例如:
>>> class MyError(Exception):
...  def __init__(self, value):
...    self.value = value
...  def __str__(self):
...    return repr(self.value)
...
>>> try:
...  raise MyError(2*2)
... except MyError as e:
...  print('My exception occurred, value', e.value)
...
My exception occurred, value: 4
>>> raise MyError('oops!')
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
__main__.MyError: 'oops!'
在这个例子中,默认的Exception的__init__()已经被覆盖.新的行为仅仅是创建了value属性.因此原有的创建args属性的行为被替换掉了.

异常类可以被定义做其它任何类能做的任何事,但通常异常类都定义的比较简单,经常情况下只是提供了一些用于被异常处理器提取错误信息的数字属性.当创建一个可以抛出几个不同错误的模块时,一个通用的做法是为模块定义的异常创建一个基类,和为了不同的错误条件创建的指定异常子类(这里的子类指继承父类的类):
--------------------------------------------------------------------
class Error(Exception):
  """模块中的异常基类"""
  pass
class InputError(Error):
  """为错误的输出抛出异常.

  属性:
    表达式--在输入的表达式中发生错误
    信息--错误的解释
  """
  def __init__(self, expression, message): 
    self.expression = expression
    self.message = message
class TransitionError(Error):
  """当一个尝试状态转换的操作没有被允许时会抛出错误.

  属性:
    先前的--转换开始的状态
    之后的--尝试新的状态
    信息--对于为什么指定的转换没有被允许的解释
  """
def __init__(self, previous, next, message):
  self.previous = previous
  self.next = next
  self.message = message
------------------------------------------------------------------
定义的异常大部分都是以"Error"作为异常名子结尾的,和标准异常命名类似.

许多的标准模块都定义了它们自己的异常用来报告他们定义的函数可能发生的错误.更详细的关于类的信息存在于Classes这一章.

8.6.定义清除动作
try语句有另外一个可选的从句是打算定义一个清除动作,这个清除动作位于所有的可能性之下.例如:
>>> try:
...  raise KeyboardInterrupt
... finally:
...  print('Goodbye, world!')
...
Goodbye, world!
KeyboardInterrupt
Traceback (most recent call last):
  File "<stdin>", line 2, in ?
一个finally从句总是在离开try语句之前被执行,无论是否有异常发生.当try从句中发生了一个异常并且这个异常已经被一个except从句处理过了(或者是异常已经在except或是else从句中发生了),异常会在finally从句被执行之后重新被抛出.finally从句也可以在退出的途中被执行当任何其它的try语句的子句通过break,continue,return等关键字离开时.下面看一个更复杂的例子:
>>> def divide(x, y):
...  try:
...    result = x / y
...  except ZeroDivisionError:
...    print("division by zero!")
...  else:
...    print("result is", result)
...  finally:
...    print("executing finally clause")
...
>>> divide(2, 1)
result is 2.0
executing finally clause
>>> divide(2, 0)
division by zero!
executing finally clause
>>> divide("2", "1")
executing finally clause
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "<stdin>", line 3, in divide
TypeError: unsupported operand type(s) for /: 'str' and 'str'
正如你所看到的,finally从句在任何情况下都会被执行.TypeError被抛出由于两个字符串相除没有被except从句处理(因为现在的except中没有定义处理TypeError这个类型的),因此在finally从句执行完毕后异常又重新被抛了出来.

在现实世界里的应用程序,finally从句对于释放外部资源(例如文件或网络连接)是很有用的,而不管资源的使用是否成功.

8.7.预定义的清除动作
一些对象定义了基本的clean-up动作(to be undertaken没有翻译应该是用来修饰前面的动作的),当对象不再需要时候,不管使用对象的操作是成功还是失败.看下面的例子,例子做的操作是尝试着打开一个文件并且将文件的内容打印到屏幕上.
for line in open("myfile.txt"):
  print(line, end="")
这段代码的问题是在代码执行完闭后没有关闭打开的myfile.txt文件.这在小的脚本中问题不大,但是在大的脚本中这就是问题了.用with语句允许像文件这要的对象用完后,确保会被迅速正确的关闭.
with open("myfile.txt") as f:
  for line in f:
    print(line, end="")
在这段代码被执行完成后,文件对象f就会被永远的关闭了,即使在执行的时候某一行出问题.像文件类型的对象,提供了预清除动作将会显示在它们的文档中.
