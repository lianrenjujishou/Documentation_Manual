This section describes how to use NGINX and NGINX Plus to serve static content, the ways to define the paths that are searched to find requested files, and how to set up index files.
::这个章节描述了如何使用nginx和nginx+来为静态文件提供服务(主要是通过定义搜索文件的路径的方式)和如何设置索引文件.
In This Section
::这章主要讲了下面三个知识点
    Root Directory and Index Files
    ::根目录和索引文件 
    Trying Several Options
    ::尝试几个选项
    Optimizing NGINX Speed for Serving Content
    ::使nginx服务静态文件的速度最优化(还可以说成快速搜索文件或快速定位文件)
Root Directory and Index Files
::第一节,李目录和索引文件
The root directive specifies the root directory that will be used to search for a file. To obtain the path of a requested file, NGINX appends the request URI to the path specified by the root directive. The directive can be placed on any level within the http, server, or location contexts. In the example below, the root directive is defined for a virtual server. It applies to all location blocks where the root directive is not included to explicitly redefine the root:
::root指令指定用来搜索文件的根目录.为了获得被请求文件的完整路径,nginx会将请求的URI追加到root指令的目录后面来组合成一个完整路径.root指令可以被放在http\server\location中的任何一层.在下面的例子中,root指令被定义在虚拟服务器中,像这种情况server中的location也会继承root参数,除非在location中也自定义一个root这样该root指令的优先级大于它的父级server中的root指令(说白了就是如果location中没有定义root指令,则找文件时location就会去和它爸server要,如果location块里自己有的话，则用自己的,这个例子很明白了,自己有就用自己的，自己没有的和爸爸借):
server {
    root /www/data;

    location / {
    }

    location /images/ {
    }

    location ~ \.(mp3|mp4) {
        root /www/media;
    }
}

Here, NGINX searches for a URI that starts with /images/ in the /www/data/images/ directory on the file system. But if the URI ends with the .mp3 or .mp4 extension, NGINX instead searches for the file in the /www/media/ directory because it is defined in the matching location block.
::在上面这个例子中，如果URI是以/images开头则nginx会在/www/data/images中搜索文件，如果URI是以.mp3或.mp4扩展名结尾的话,则Nginx会在/www/media目录中搜索文件
If a request ends with a slash, NGINX treats it as a request for a directory and tries to find an index file in the directory. The index directive defines the index file’s name (the default value is index.html). To continue with the example, if the request URI is /images/some/path/, NGINX delivers the file /www/data/images/some/path/index.html if it exists. If it does not, NGINX returns HTTP code 404 (Not found) by default. To configure NGINX to return an automatically generated directory listing instead, include the on parameter to the autoindex directive:
::如果请求是以斜杠结尾,则nginx会将它作为一个请求目录从而尝试在该目录中寻找索引文件.index指令定义了索引文件的名字(默认的名字是index.html).接着上面例子来说,如果URI是以/images/开头的则nginx会将提交/www/data/images/some/path/路径下的index.html文件(在index.html文件存在的情况下).如果该路径下不存在index.html(还是说该路径都不存在?),则默认情况下,nginx会返回错误码404.为了让Nginx返回一个自动创建的目录列表而不是说上面提到的404,需要在配置文件中将audoindex指令设置为on.
location /images/ {
    autoindex on;
}
You can list more than one filename in the index directive. NGINX searches for files in the specified order and returns the first one it finds.
::你可以在index指令后面指定多个文件名,nginx会在指定的目录下按照index指令后给定的文件名顺序进行搜索,将搜索到的第一个文件返回
location / {
    index index.$geo.html index.htm index.html;
}
The $geo variable used here here is a custom variable set through the geo directive. The value of the variable depends on the client’s IP address.
用在上面例子中的$geo变量是通过geo指令自定义的一个变量集合,其值依赖于客户端的IP地址.
To return the index file, NGINX checks for its existence and then makes an internal redirect to the URI obtained by appending the name of the index file to the base URI. The internal redirect results in a new search of a location and can end up in another location as in the following example:
::为了返回索引文件,nginx首先会检查它的存在然后会做在内部将该文件重定向到上文中组合而成的URI中(即由root指令指定的路径部分加上location或server后跟随的指令部分).这个内部的重定向会导致一个新的location匹配并且在另一个location中结束，样例如下:
location / {
    root /data;
    index index.html index.php;
}

location ~ \.php {
    fastcgi_pass localhost:8000;
    ...
}
Here, if the URI in a request is /path/, and /data/path/index.html does not exist but /data/path/index.php does, the internal redirect to /path/index.php is mapped to the second location. As a result, the request is proxied.
::上面的例子中，比如说请求中的URI是/path/,并且/data/path/index.html文件不存在,但是/data/path/index.php文件存在,则内部的重定向会将/path/index.php文件映射到第二个location中.请求被映射到第二个location的结果就是请求被代理了.
Trying Several Options
::第二节,尝试几个选项
The try_files directive can be used to check whether the specified file or directory exists and make an internal redirect, or return a specific status code if they don’t. For example, to check the existence of a file corresponding to the request URI, use the try_files directive and the $uri variable as follows:
::try_files指令的作用是检测指定的文件或目录是否存在,如果存在的话将请求做一个内部的重定向,如果不存在则返回一个特定的状态码.如下例所示,使用try_files指定和$uri变量,根据相应的请求URI检测一个文件是否存在.
server {
    root /www/data;

    location /images/ {
        try_files $uri /images/default.gif;
    }
}
The file is specified in the form of the URI, which is processed using the root or alias directives set in the context of the current location or virtual server. In this case, if the file corresponding to the original URI doesn’t exist, NGINX makes an internal redirect to the URI specified in the last parameter, returning /www/data/images/default.gif.
::文件被以URI的形式指定,该URI在当前location或virtual server中用root或alias指令被处理,如果与原始URI相一致的文件不存在,则nginx会做一个内部的重定向到由try_files指令最后的参数指定的URI,在该例中为/www/data/images/default.gif(不明所以)
The last parameter can also be a status code (directly preceded by the equals sign [=])< or the name of a location. In the following example, a 404 error is returned if none of the parameters to the try_files directive resolve to an existing file or directory.
::最后一个参数也可以是一个状态码(等号位于状态码之前)或者是一个location的名字.下面的例子中，如果try_files指令没有参数解析到一个已经存在的文件或目录时,一个404错误被返回
location / {
    try_files $uri $uri/ $uri.html =404;
}
In the next example, if neither the original URI nor the URI with the appended trailing slash resolve into an existing file or directory, the request is redirected to the named location which passes it to a proxied server.
::下个例子中,如果原始的URI和带有后置斜杠的URI都不能定位到一个已存在的文件或目录,则这个请求将被重定向到被命名的location中,该location传递请求给一个代理服务器
location / {
    try_files $uri $uri/ @backend;
}

location @backend {
    proxy_pass http://backend.example.com;
}
For more information, watch the Content Caching on-demand webinar to learn how to dramatically improve the performance of a website, and get a deep-dive into NGINX’s caching capabilities.
::更多信息可以看内容缓存点播研讨会来学习如何显著的提高网站的性能，并且对nginx的缓存能力有一个更深入的了解
Optimizing NGINX Speed for Serving Content
::第三节,使nginx处理静态内容速度最优化
Loading speed is a crucial factor of serving any content. Making minor optimizations to your NGINX configuration may boost the productivity and help reach optimal performance.
::加速速度对于处理(服务)任何内容都是一个重要的因素.对配置文件做局部(或说微小的)的优化就可能大大提高效率并且达到最佳的性能
Enabling sendfile
::将sendfile指令设置为on状态
By default, NGINX handles file transmission itself and copies the file into the buffer before sending it. Enabling the sendfile directive will eliminate the step of copying the data into the buffer and enables direct copying data from one file descriptor to another. Alternatively, to prevent one fast connection to entirely occupy the worker process, you can limit the amount of data transferred in a single sendfile() call by defining the sendfile_max_chunk directive:
::默认情况下，nginx在文件发送之前会将文件拷贝到缓存中.开启sendfile指令将取消将数据拷贝到缓存的这一步并且开启直接将数据从一个描述符到另一个描述符.同时为了防止快速的连接占据速个工作的进程,可以通过定义sendfile_max_chunk指令来调用sendfile()函数限制文件传输的大小
location /mp3 {
    sendfile           on;
    sendfile_max_chunk 1m;
    ...
}
Enabling tcp_nopush
::将tcp_nopush指令设置为on
Use the tcp_nopush option together with sendfile on;. The option will enable NGINX to send HTTP response headers in one packet right after the chunk of data has been obtained by sendfile
::tcp_nopush指令和sendfile指令一起使用时才有效;.当sendfile指令获取数据块之后,tcp_nopush可以在一个包中立刻发送HTTP响应头.
location /mp3 {
    sendfile   on;
    tcp_nopush on;
    ...
}
Enabling tcp_nodelay
::将tcp_nodelay指令状态置为on
The tcp_nodelay option allows overriding the Nagle’s algorithm, originally designed to solve problems with small packets in slow networks. The algorithm consolidates a number of small packets into the larger one and sends the packet with the 200 ms delay. Nowadays, when serving large static files, the data can be sent immediately regardless of the packet size. The delay would also affect online applications (ssh, online games, online trading). By default, the tcp_nodelay directive is set to on which means that the Nagle’s algorithm is disabled. The option is used only for keepalive connections:
::tcp_nodelay选项可以重新定义内格尔算法,该算法最初是设计用来小包在低速的网络环境下的传输问题.这个算法整合大量的小包为一个大包然后以200ms的延迟发送.今天,当我们服务一个大的静态文件时,我们可以不用管数据的大小,立即发送.延迟同样也影响在线应用(如ssh,在线游戏,在线交易).默认情况下,tcp_nodelay指令被设置为on,这意味着默认情况下内格尔算法是处于禁用状态.tcp_nodelay的作用仅仅被用来检测连接是否被断开.
location /mp3  {
    tcp_nodelay       on;
    keepalive_timeout 65;
    ...
}
Optimizing the Backlog Queue
::优化积压队列
One of the important factors is how fast NGINX can handle incoming connections. The general rule is when a connection is established, it is put into the “listen” queue of a listen socket. Under normal load, there is either low queue, or there is no queue at all. But under high load, the queue may dramatically grow which may result in uneven performance, connections dropping, and latency.
::最重要的因素之一是nginx能够以多快的速度处理进来的链接.一般的规则是当一个连接被建立,它就会被放入一个监听套接字的监听队列.如果连接数不是很多(或叫负载不大)的情况下,可以有少量的队列或是干脆没有队列.但是在大负载的情况下,队列会显著的增长从而导致性能不好,如连接挂掉或是高延迟.
Measuring the Listen Queue
::测试当前的监听队列
Let’s measure the current listen queue. Run the command:
::运行下面的命令来执行监听队列的测量:
netstat -Lan
The command output may be the following:
::netstat -Lan会有以下的输出:
Current listen queue sizes (qlen/incqlen/maxqlen)
Listen         Local Address         
0/0/128        *.12345            
10/0/128        *.80       
0/0/128        *.8080
The command output shows that there are 10 unaccepted connections in the listen queue on Port 80, while the connection limit is 128 connections, and this situation is normal.
::从上面的命令输出可以看出有10个未被接受的链接在80端口的监听队列中,此时的链接数限制为128,此时的输出表示服务器是正常的，即设置的最大负载数可以满足当前链接数的需求
However, the command output may be as follows:
::然而命令输出可能是下面的数据:
Current listen queue sizes (qlen/incqlen/maxqlen)
Listen         Local Address         
0/0/128        *.12345            
192/0/128        *.80       
0/0/128        *.8080
The command output shows 192 unaccepted connections which exceeds the limit of 128 connections. This is quite common when a web site experience heavy traffic. To achieve optimal performance you will need to increase the maximum number of connections that can be queued for acceptance by NGINX in both your operating system and NGINX configuration.
::上例可以看出,此时系统已经有192个链接未被接受超出了最大128个链接数的限制.当有好多IP访问网站时这种现象是非常常见的.为了获得最佳性能你需要在你的系统和nginx配置文件里增加队列可被nginx接受的最大连接数量
Tuning the Operating System
::设置(调优)操作系统
Increase the value of the net.core.somaxconn key from its default value (128) to the value high enough to be able to handle a high burst of traffic:
::增加net.core.somaxconn
key的值从默认的128增加到一个足够大的值，这个值能够承受系统突然爆发的流量
For FreeBSD, run the command:
sudo sysctl kern.ipc.somaxconn=4096
For Linux, run the command:
sudo sysctl -w net.core.somaxconn=4096
Open the file: /etc/sysctl.conf

vi   /etc/sysctl.conf
Add the line to the file and save the file:

net.core.somaxconn = 4096
Tuning NGINX
::设置(调优)nginx
If you set the somaxconn key to a value greater than 512, change the backlog parameter of the NGINX listen directive to match:
如果你设置了somaxconn key的值大于512,则要改变nginx里面相应的listen指令的backlog参数为对应的值:
server {
    listen 80 backlog 4096;
    # The rest of server configuration
}
