替换运算符
1.${varname:-word}
#.说明:首先要明白这里面varname是变量名,而word是一个值.
#意义:它的意思是如果varname这个变量存在,并且非空,则将varname变量的值返回,否则的话将word返回
#用途:如果变量未定义,则返回默认值
#例子:如果loginname未定义,则${loginname:-ollir}的返回值为ollir

2.${varname:=word}
#意义:如果varname这个变量存在且非空,则返回varname的值,否则将word赋给变量varname
#用途:如果变量(varname)未定义,则定义(varname)一个变量并且给变量赋初值(word)
#例子:如果loginname未定义,则${loginname:=ollir}返回ollir,并且定义loginname=ollir

3.${varname:?message}
#意义:如果变量varname存在且非空,则返回varname变量的值,否则打印'varname:message'并退出脚本.如果message省略的话,则打印'parameter null or not set'
#用途:用于捕捉变量未定义而导致的错误
#例子:如果loginname未定义,则${loginname:?undefined!}会向屏幕输出'loginname:undefined'然后退出脚本

4.${varname:+word}
#意义:如果varname变量存在且非空,则将word作为返回值,否则返回null
#用途:用于测试变量是否存在
#例子:如果loginname已定义,则${loginname:+}返回1

***.如果{}里面没有冒号的话,则将其意义变为将'且非空'这三个字去掉

模式匹配运算符
说明:目前就*和?感觉是元字符,前者表示任意个任意字符,后者表示一个任意字符,再就是普通字符了,完全和windows一样了,没找到相关文章,后期补充吧.
1.${varname#pattern}
#意义:如果pattern匹配上变量varname值的开头,则采用非贪婪匹配,并将非贪婪匹配到的部分删除,将余下的部分返回
#


2.${varname##pattern}
#意义:类似1中所述,唯一不同的是两个#表示的是贪婪匹配,即尽量多地删除开头匹配的部分,将剩余的字符串返回

3.${varname%pattern}
#意义:和1的意思一样,但是方向相反,单个%表示多尾部匹配,如果匹配上的话则采用非贪婪删除,即最小删除,然后将剩余的字符串返回

4.${varmae%%pattern}
#意义:和3不同的是,采用贪婪删除,即如果尾部匹配成功,则尽可能的多删,并将剩余的字符串返回

5.${varname/pattern/string};${varname//pattern/string}
#意义:匹配pattern的最长部分替换为string,格式一,只替换匹配到的第一部分,格式二,即有两个斜杠的那个,将所有匹配到的pattern都替换为string.另外如果模式以#开头则匹配开头,如果以%开头则匹配结尾.如果string为空,则匹配到的部分被删除.如果varname部分为@或*则依次应用每个位置参数,并扩展为结果列表
