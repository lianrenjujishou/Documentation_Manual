**.未完,需要明确的还有SUID,SGID,sticky位的意义和作用,还有软连接,硬连接,管道文件,
##.在测试test命令时可写一个小脚本,通过传参的方式测试所有的选项:
----------------------
#! /bin/bash
test $1 $2 $3
echo $?
----------------------
TEST          用户命令                 TEST(1)

名字
	test-检测文件类型和比较值

总览
	test EXPRESSION
	test

	[ EXPRESSION ]
	[ ]
	[ OPTION

描述
	带着由EXPRESSION决定的状态值退出
	--help 显示帮助并退出
	--version 输出版本信息并退出
	
	一个被忽略的EXPRESSION,默认为false.否则EXPRESSION是true或者是false或者是EXPRESSION设置的退出状态.它们是下面之一:

----------------------------------------------
( EXPRESSION )
	EXPRESSION 是true

! EXPRESSION
	EXPRESSION是false

EXPRESSION1 -a EXPRESSION2
	EXPRESSION1和EXPRESSION2都是true

EXPRESSION -o EXPRESSION2
	两者之一为true
--------------------空字符串判断(2个)--------------------------
-n STRING
	STRING的长度不为零

STRING和-n STRING的效果一样(测试字符串是否为空的情况下,-n有没有无所谓)

-z STRING                  *.zero
	STRING的长度为零
-----------------------字符串比较(2个)--------------------------------------
STRING1 = STRING2
	两个字符串相等

STRING1 != STRING2
	两个字符串不等
---------------------整数比较(6个)-------------------------
INTEGER1 -eq INTEGER2      *.equal
	两个整型数相等

INTEGER1 -ge INTEGER2      *.greater equal
	整型1大于等于整型2

INTEGER1 -gt INTEGER2      *.greater than
	整型1大于整型2

INTEGER1 -le INTEGER2
	整型1小于等于整型2 *.less equal

INTEGER1 -lt INTEGER2      *.less than
	整型1小于整型2

INTEGER1 -ne INTEGER2      *.not equal
	整型1不等于整型2
辅助记忆:等于,不等于,大于,小于,大于等于,小于等于;其次要记得两边都是整数,传参时可以是'123'这种带引号的,因为怎么着shell都是将所有的变量作为字符串的,具体比较时它自己就分了
----------------------文件比较(3个)------------------------
FILE1 -ef FILE2
	文件1和文件2有相同的设备和相同的索引节点号

FILE1 -nt FILE2            *.newer than
	文件1比文件2新(比的是修改日期),FILE也可以是文件夹

FILE1 -ot FILE2            *.older than
	文件1比文件2老(比的是修改日期),FILE也可以是文件夹

---------------------文件类型(9个)-------------------------
-b FILE                    *.block
	文件存在并且为block(块文件)

-c FILE                    *.character
	文件存在并且为character文件(字符文件)

-d FILE                    *.directory
	文件存在并且是一个directory(目录)

-e FILE                    *.exist
	文件存在(FILE也可以是目录名)

-f FILE                    *.file(和-e的区别是它仅限于文件,不包含目录)
	文件存在并且是一个普通文件(ls -l后没有d呀b呀这些标志)

-h FILE                     *.link
	文件存在并且该文件是一个符号链接文件(同-L选项)

-L FILE                     *.link
	文件存在,并且是一个符号链接(同-h选项)	

-S FILE                      *.socket
	文件存在并且是一个套接字文件

-p FILE                      *.pipline
	文件存在并且是一个命名的管道
辅助记忆:文件也好目录也好首先得存在-e,接着把最特殊的挑出去-d,然后是该文件了,最先就要把普通文件挑出来-f,剩下的就只能靠记忆了-b -c -S -p -L -h
-------------------特殊权限(3个)---------------------------
-g FILE
	文件存在并且是否具有SGID权限

-k FILE
	文件存在并且有它的sticky位设置

-u FILE
	文件存在并且设置了SUID位
--------------------id有效性(2个)---------------------------
-G FILE
	文件存在并且文件拥有者的组id是一个有效的组id

-O FILE                               *.own
	文件存在并且拥有者的ID是一个有效ID

----------------------------------------------
-s FILE                      *.size
	文件(或目录)存在并且文件大小不为0

-t FD
	文件描述符FD在终端被打开
----------------------一般权限(3个)--------------------
-r FILE                      *.read
	文件存在并且具有读权限

-w FILE                      *.write
	文件存在并且具有写权限

-x FILE                      *.excute
	文件存在并且有可执行权限
******************************************
除了-h和-L选项外,其它选项所提到的测试文件都不是符号链接文件.当心,shell中的括号需要被转义(例如被反斜杠转义).INTEGER也可以-l字符串,这种情况下,是用STRING的长度去和INTEGER比.

注释: [ 尊重--help和--version选项,但是test不.test对待这里面的每一个和它对待其它非空STRING一样.

注释:你的shell可能有它自己的test和或[版本,那些版本通常会取代本文中所用到的版本.请参考你所使用的shell的文档来详细了解你使用的shell具体都支持哪些内容.


练习中学到的东西(明白不明白的都写上先,反正结果是对的):
1.在shell中使用变量最好都将变量给用引号给引起来,除非你在明确的懂得不加引号的情况下也是对的,对于test -n选项,如果不用于脚本中时测试都是正常的,但是在脚本中,如果不给$2加上双引号''与'xxx'的回执是一样的,先这样记吧,因为不明白实际的逻辑

