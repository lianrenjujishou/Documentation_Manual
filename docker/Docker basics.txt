1.关于docker在各个平台的安装就直接看官方的安装教程吧，比较靠谱，而且在不稳定时期安装的方式还有可能会变，所以记住去官网看是如何安装的比较靠谱，安装里面分的比较细，而且在安装的过程中对于各版本需要注意的东西等等都有讲到：先放上这个链接吧(https://docs.docker.com/engine/getstarted/step_two/)
--------------------------------------
2.目前docker有两个版本一个是communication edition(CE),一个是enterprisement
edition(EE),这两个版本支持的系统不同，具体的可以上官网找参考，目前我只在https://www.docker.com/get-docker这个网址下边看到有相关的图标显示分别都支持哪些系统
docker升级和安装一样，官网说要升级时(拿debian举例)先apt-get
update一下，然后apt-get install docker-ce.如果更新后，你用apt-cache madison
docker-ce来列出你可以安装的有效docker,获取输出信息的第二个字段，然后apt-get
install docker-ce=<第二个字段内容(如17.03.0~ce-0~debian-jessie)>
docker version的输出可以看出当前的docker客户端和服务端的信息，如版本号；
docker ps可以输出当前正在运行的container;
docker ps -a 我感觉输出的是运行的container的历史；即docker ps只能显示当前正在运行的,而docker ps -a可以显示所有你运行过的，无论当前是运行状态还是已退出状态
----------------------------
3.最初学到的命令"docker run
hello-world"可以分为三部分，docker:用来告诉系统你使用的是docker程序；run:是docker的一个子命令用来 创建并且运行 docker容器；hello-world:这是一个镜像名称，它的作用是告诉docker哪个镜像要被加载进container
这里面的hello-world不是一个固定值，它就是某一个镜像(image)名称，一个镜像(image:hello-world)是由文件系统(filesystem)和在运行的时候要用到的相关参数(parameters)组成的
而容器是镜像的一个实例(这里可以联想一下编程里面的类与实例)
---------------------------
4.你不必担心你的电脑是否可以运行Docker镜像中的软件-Docker容器可以运行这些软件
----------------
5.docker有一个Docker Store里面有好多个人发布的镜像与像谷歌，IBM，微软这样大公司发布的官方镜像。一个镜像应该说明它里面包含了什么类型的软件和这些软件的运行方法 
------------------------
6.当你运行"docker run 镜像名[参数1][参数2][...]"的时候，如果这里的镜像名不在你本地，则docker会自动执行"docker pull 镜像名"将该镜像从hub上拽下来然后运行它。你也可以手动先执行"docker pull 镜像名"先将镜像下载下来，然后再"docker run 镜像名"，这样docker检测到本地有就不用再去hub上拽了，其实原理是一样的
-----------------------------
7.可以用docker images命令来检测你本地都有哪些镜像(image)
------------------------------------
8.从这开始就要创建自己的镜像了，上面只是说了怎么运行镜像用的都是别人制作好的
镜像的建立这块是重点，要明白docker build每一步都做了什么，做到心中有数，但是目前感觉不能完全的理解，因为接触不多的原因也只能按照当前自己的想法说一下docker build每一步都做了什么 
a.先建立一个文件夹，之后命令行的路径要切换到该文件夹下，暂且叫它工程文件夹吧,文件夹命名为mydockerbuild(mkdir mydockerbuild),该文件夹要包含建立一个镜像的所有内容，目前因为刚建好所以是空的.
b.利用cd命令切换到mydockerbuild文件夹下
c.利用编辑器(vim,vi,nano,notepad,etc.)建立一个名为Dockerfile的文本文件,该文件名是固定的只能是Dockerfile不能是别的
d.在刚刚建立的Dockerfile中开始写指令了，我们要写的第一个指令是FROM指令，它的作用是给docker指明你的新镜像要基于哪个镜像"FROM docker/whalesay:latest";接下来是RUN指令,它的作用是在FROM镜像中安装软件(目前是这么理解的，可能接触的少，但就目前为止我是这样认为的),而且这条命令执行后感觉软件就会集成在镜像里了，不像下面要讲的CMD是临时运行的"RUN apt-get update && apt-get install -y fortunes";接下来讲的是CMD命令，官方说的是该命令是在环境建立好之后最后运行的命令,现在我对docker中layer的详细情况还是很模糊，到这了还是认为RUN命令只是在建立镜像的时候运行一次，当再次运行docker的时候就直接用里面装好的软件即可，而不是说每一次运行docker run的时候都会将Dockerfile中的指令都执行一遍，所需要执行的只有CMD,CMD之前的在建立自己的镜像的时候都已经封好在新镜像中了"CMD /usr/games/fortune -a | cowsay" 
e.建立好的Dockerfile大概是下面这样(当然这只是最简单的情况,Dockerfile中有好多的可配选项):
    FROM docker/whalesay:latest
    RUN apt-get update && apt-get install -y fortunes
    CMD /usr/games/fortune -a | cowsay
f.保存该Dockerfile文件，到目前利用它里面的配置就可以创建自己的镜像了
-----------------------------
9.正式建立自己的镜像了
运行"docker build -t "name" Dockerfile所在路径",如"docker build -t docker-whale ."
这里-t指明了要保存的文件名，也是后期"docker run name"中的"name"
这里的.命令指明在哪里查找Dockerfile文件，我们知道"点"指的是当前目录
语句翻译过来就是"在当前目录下寻找Dockerfile文件，利用文件里面的选项建立名为docker-whale的镜像"
当然如果你此时终端路径不是在Dockerfile所在目录下，则要用绝对路径，所以路径这块要变通着点，而且看情况，该路径不需要到具体的文件，只需定位到目录即可，程序会自动到你所指定的目录去找名为Dockerfie的文件
-----------------------------
10.这步我们看一下"docker build -t "name" Dockerfile所在路径"命令运行后程序都干了什么吧，我们可以从它的输出内容来分析
a.首先会有一句"Sending build context to Docker daemon xxx KB",这句话的意思是将Dockerfile文件内容传递给Docker daemon,好让Docker daemon知道接下来每一步都需要执行什么指令，这里注意Docker daemon执行指令的顺序和Dockerfile文件里的顺序是一样的，即从上到下一条一条执行
b.以上面e中的内容为例。Docker首先会检查whalesay
image是否在本地，如果不在本地的话会从hub运行拉取到本地，不管之前就在本地还是拉到本地的，一句话一旦本地有了whalesay文件，则会输出:
            "Step 1 : FROM docker/whalesay:latest
             ---> 6b362a9f73eb"
第二行的数字是给whalesay图层创建的id,我们知道在docker里面所有的东西都是layer嘛，到这对这里面详细图层的概念还是很模糊
官方又说了,Dockerfile中每一行都对应新镜像的一个层，说到这就和我之前的想法相背了，我认为镜像做好后就两层，CMD是一次，CMD前面的是一层，但是它说每一行都是一层，我知道99%是我不对，但是Dockerfile每一行都是一个层的概念是否只在建立新镜像的时候有用呢，在新镜像建立好之后"docker
run"的时候还会不会读取Dockerfile文件呢,如果只是在建立的时候读，则这个每行都是一层的概念我能明白，如果在每次"docker
run"的时候都读取Dockerfile文件，那么我就不大明白了，也不是不大明白，因为还没实际运行过，难度在"docker
run"的时候改变Dockerfile的内容，镜像会有不同吗?况且我从别人那拉取的时候也没有Dockerfile这个文件呀，只是拉取的镜像
对于上面的这个疑问，要在之后的练习中搞明白了
c.在b中创建好镜像层后，这一步，docker会先创建一个container，然后在这个container中运行b中的镜像,然后再在container里面执行Dockerfile中下一行的RUN命令来安装fortune。
从输出内容可以看出,在运行RUN命令的时候根据给出的Rrnning in
xxx可以看出该命令应该是运行在container中的,xxx应该是container的id，而非运行在镜像中
而RUN命令运行完成后可以从输出内容看出给它新建了一个层"--->
xxx",然后移除了所谓的中间体(媒介?)，看这个中间体(媒介),该媒介指的是container
d.上面讲完RUN命令运行的时候会先建一个container,加载image层并运行RUN命令，等RUN命令运行完之后，会给RUN命令分配一个id(暂且叫它RUN层)，当RUN层建立好后就将之前建立的container给移除了；现在要继续运行CMD命令，官方说又要重新建立一个中间container,Docker会为CMD创建一个层(每个层都有一个独立的id),然后又将这个新建的中间container给移除了，当最后一个CMD层也被创建完成后整个新镜像的建立过程就结束了
-------------------------------
11.显然上面的10是很重要的,因为可以让你理解建立一个新镜像程序都做了什么。下面讲docker的镜像库(https://hub.docker.com/)
a.进上面的网址sign up a account
b.进入邮箱verify your email,如果收件箱没有看一下spam folder,or wait a moment 
c.进入网站首页点击"Create Repository"
d.填好用户名，short desription,visiblity选择public然后点Create按钮
e.本地要先给镜像打开tab"docker tag id hubusername/localimagename:latest"
f.打开标签后docker images里会多出一项hubusername/localimagename且这一项和localimagename的id是相同的
g.要上传到自己的hub中要先登录git login
h.登录成功后输入docker push hubusername/localimagename,上传成功后在自己的dockerhub网页中就能看到了 i.下面说拉取，想要练习拉取本地就不能有要拉取的镜像，故先将本地的镜像删了，删除方法"docker rmi -f id"这种好像就连id一样的全删了，还可以用docker image rm -f后加id或是名称来单个删除；删完后再"docker run hubusername/localimagename"这样检测本地就没有了，从而从云端进行拉取(删除命令再练一下弄准了)
