                          xbmcgui(16.x-jarvis)
Classes
__builtin__.object
  Action
  Control
    ControlButton
    ControlCheckMark
    ControlEdit
    ControlFadeLabel
    ControlGroup
    ControlImage
    ControlLabel
    ControlList
    ControlProgress
    ControlRadioButton
    ControlSlider
    ControlSpin
    ControlTextBox
  Dialog
  DialogProgress
  DialogProgressBG
  ListItem
  Window
    WindowDialog
    WindowXML
      WindowXMLDialog
*************************************
class Action(__builtin__.object)
  Action class.
  For backwards compatibility resons the == operator is extended so that it can compare an action with other actions and action.GetID() with numbers
    - example: (action == ACTION_MOVE_LEFT)

Methods defined here:
__eq__(...)
  x.__eq__(y) <==> x==y
__ge__(...)
  x.__ge__(y) <==> x>=y
__gt__(...)
  x.__gt__(y) <==> x>y
__le__(...)
  x.__le__(y) <==> x<=y
__lt__(...)
  x.__lt__(y) <==> x<y
__ne__(...)
  x.__ne__(y) <==> x!=y

getAmount1(...)
  getAmount1() -- Returns the first amount of force applied to the thumbstick n.
getAmount2(...)
  getAmount2() -- Returns the second amount of force applied to the thumbstick n.
getButtonCode(...)
  getButtonCode() -- Returns the button code for this action.
getId(...)
  getId() -- Returns the action's current id as a long or 0 if no action is mapped in the xml's.
-----------------------
Data and other attributes defined here:

__new__ = <built-in method __new__ of type object>
  T.__new__(S, ...) -> a new object with type S, a subtype of T
**************************************
class Control(__builtin__.object)
Control class.
Base class for all controls.(所有控制的基类!)
------------------
Methods defined here:

__cmp__(...)
x.__cmp__(y) <==> cmp(x,y)
canAcceptMessages(...)
controlDown(...)
controlDown(control) -- Set's the controls down navigation.
*Note, You can also use setNavigation(). Set to self to disable navigation.
Throws:
- TypeError, if one of the supplied arguments is not a control type.
- ReferenceError, if one of the controls is not added to a window.
example:
- self.button.controlDown(self.button1)

controlLeft(...)
controlLeft(control) -- Set's the controls left navigation.
control : control object - control to navigate to on left.
*Note, You can also use setNavigation(). Set to self to disable navigation.
Throws:
- TypeError, if one of the supplied arguments is not a control type.
- ReferenceError, if one of the controls is not added to a window.
example:
- self.button.controlLeft(self.button1)

controlRight(...)
controlRight(control) -- Set's the controls right navigation.
control : control object - control to navigate to on right.
*Note, You can also use setNavigation(). Set to self to disable navigation.
Throws:
- TypeError, if one of the suppied arguments is not a control type.
- ReferenceError, if one of the controls is not added to a window.
example:
- self.button.controlRight(self.button1)

controlUp(...)
controlUp(control) -- Set's the controls up navigation.
control : control object - control to navigate to on up
*Note, You  can also use setNavigation() Set to self to disable navigation.
Throws:
- TypeError, if one of the supplied arguments is not a control type.
- ReferenceError, if one of the controls is not added to a window.
example:
- self.button.controlUp(self.button1)

getHeight(...)
getHeight() -- Returns the control's current height as an integer.
example:
- height = self.button.getHeight()

getId(...)
getId() -- Returns the control's current id as an integer.
example:
- id = self.button.getId()

getPosition(...)
getPosition() -- Returns the control's current position as a x,y integer tuple.
example:
- pos = self.button.getPosition()

getWidth(...)
getWidth() -- Returns the control's current width as an integer.
example:
- width = self.button.getWidth()

getX(...)

getY(...)

setAnimations(...)
setAnimations([(event, attr,)*]) -- Set's the control's animations.  #attr后右的逗号是什么鬼
[(event, attr,)*] : list - A list of tuples consisting of event and attributes pairs.
- event : string - The event to animate
- attr : string - The whole attribute string separated by spaces.
Animating your skin - http://kodi.wiki/view/Animating Your Skin
example:
- self.button.setAnimations([('focus', 'effect=zoom end=90,247,220,56 time=0',)])

setEnableCondition(..)
setEnableCondition(enable) -- Set's the control's enabled condition. Allows Kodi to control the enabled status of the control
enable : string - Enable condition.
List of Conditions - http://kodi.wiki/view/List of Boolean Conditions
example:
- self.button.setEnableCondition('System.InternetState')

setEnabled(...)
setEnabled(enabled) -- Set's the control's enabled/disabled state.
enabled : bool - True=enabled / False=disabled.
example:
- self.button.setEnabled(False)n

setHeight(...)
setHeight(height) -- Set's the controls height.
height : integer - height of control.
example:
- self.image.setHeight(100)

setNavigation(...)
setNavigation(up,  down, left, right) -- Set's the controls navigation.
up : control object - control to navigate to on up.
down : control object - control to navigate to on down.
left : control object - control to navigate to on left.
right : control object - control to navigate to on right.
*Note, Same as controlUp(), controlDown(), controlLeft(), controlRight().Set to self to disable navigation for that direction
Throws:
- TypeError, if one of the supplied arguments is not a control type.
- ReferenceError, if one of the controls is not added to a window.
example:
- self.button.setNavigation(self.button1, self.button2, self.button3, self.button4)

setPosition(...)
setPosition(x, y) -- Set's the controls position.
x : integer - x coordinate of control.
y : integer - y coordinate of control.
*Note, You may use negative integers. (e.g sliding a control into view)
example:
- self.button.setPosition(100, 250)

setVisibleCondition(...)
setVisibleCondition(visible[, allowHiddenFocus]) -- Set's the control's visible condition. Allows Kodi to control the visible status of the control.
visible : string - Visible condition.
allowHiddenFocus : bool - True=gains focus even if hidden.
List of Conditions - http://kodi.wiki/view/List of Boolean Conditions
example:
- self.button.setVisibleCondition('[Control.IsVisible(41) + !Control.IsVisible(12)]', True)

setWidth(...)
setWidth(width) -- Set's the controls width.
width : integer - width of control.
example:
- self.image.setWidth(100)
************************************************
class ControlButton(Control)
ControlButton class.
ControlButton (x, y, width, height, label[, focusTexture, noFocusTexture, textOffsetY, alignment, font, textColor, disabledColor, angle, shadowColor, focusedColor])
x : integer - x coordinate of control.
y : integer - y coordinate of control.
width : integer - width of control.
height : integer - height of control.
label : string or unicode - text string.
focusTexture : [opt] string - filename for focus texture.
noFocusTexture : [opt] string - filename for no focus texture.
textOffsetX : [opt] integer - x offset of label.
textOffsetY : [opt] integer - y offset of label.
alignment : [opt] integer - alignment of label - *Note, see xbfont.h
font : [opt] string - font used for label text. (e.g. 'font13')
textColor : [opt] hexstring - color of enabled button's label. (e.g.  '0xFFFFFFFF')
disabledColor : [opt] hexstring - color of disabled button's label. (e.g.  '0xFFFF3300')
angle : [opt] integer - angle of control. (+ rotates CCW, - rotates CW) <!-- CW:clockwise(顺时针) CCW:counterclockwise(逆时针)-->
shadowColor : [opt] hexstring - color of button's label's shadow. (e.g.  '0xFF000000')
focusedColor : [opt] hexstring - color of focused button's label. (e.g.  '0xFF00FFFF')
*Note, You can use the above as keywords for arguments and skip certain optional arguments.
  Once you use a keyword, all following arguments require the keyword.
  After you create the control, you need to add it to the window with addControl().
example:
- self.button = xbmcgui.ControlButton (100, 250, 200, 50, 'Status', font='font14')
--------------------------------------------
Method resolution order:

ControlButton
Control
__builtin__.object
-------------------------
Methods defined here:

getLabel(...)
getLabel() -- Returns the buttons label as a unicode string.
example:
- label = self.button.getLabel()

getLabel(...)
getLabel2() -- Returns the buttons label2 as a unicode string.
example:
- label = self.button.getLabel2()

setDisabledColor(...)
setDisabledColor(disabledColor) -- Set's this buttons disabled color.
disabledColor : hexstring - color of disabled button's label. (e.g.  '0xFFFF3300')
example:
- self.button.setDisabledColor('0xFFFF3300')

setLabel(...)
setLabel([label, font, textColor, disabledColor, shadowColor, focusedColor]) -- Set's this buttons text attributes.
label : [opt] string or unicode - text string.
font : [opt] string - font used for label text. (e.g. 'font13')
textColor : [opt] hexstring - color of enabled button's label. (e.g.  '0xFFFFFFFF')
disabledColor : [opt] hexstring - color of disabled button's label. (e.g.  '0xFFFF3300')
shadowColor : [opt] hexstring - color of button's label's shadow. (e.g.  '0xFF000000')
focusedColor : [opt] hexstring - color of focused button's label. (e.g.  '0xFFFFFF00')
label2 : [opt] string or unicode - text string.
*Note, You can use the above as keywords for arguments and skip certain optional arguments.
  Once you use a keyword, all following arguments require the keyword.
example:
- self.button.setLabel('Status', 'font14', '0xFFFFFFFF', '0xFFFF3300', '0xFF000000')<!--as keyword for arguments:作为参数的关键字-->
------------------------------------
Data and other attributes defined here:

__new__ = <built-in method __new__ of type object>
T.__new__(S, ...) -> a new object with type S, a subtype of T
--------------------------------
Methods inherited from Control:
应该是继承了Control类的所有方法，没细看只是大概对了一下，应该是所有的
*****************************************************
class ControlCheckMark(Control)
ControlCheckMark class.
ControlCheckMark (x, y, width, height, label[, focusTexture, noFocusTexture, checkWidth, checkHeight, alignment, font, textColor, disabledColor])
x : integer - x coordinate of control.
y : integer - y coordinate of control.
width : integer - width of control.
height : integer - height of control.
label : string or unicode - text string.
focusTexture : [opt] string - filename for focus texture.
noFocusTexture : [opt] string - filename for no focus texture.
checkWidth : [opt] integer - width of checkmark.
checkHeight : [opt] integer - height of checkmark.
alignment : [opt] integer - alignment of label - *Note, see xbfont.h
font : [opt] string - font used for label text. (e.g. 'font13')
textColor : [opt] hexstring - color of enabled checkmark's label. (e.g.  '0xFFFFFFFF')
disabledColor : [opt] hexstring - color of disabled checkmark's label. (e.g.  '0xFFFF3300')
*Note, You can use the above as keywords for arguments and skip certain optional arguments.
  Once you use a keyword, all following arguments require the keyword.
  After you create the control, you need to add it to the window with addControl().
example:
- self.checkmark = xbmcgui.ControlCheckMark (100, 250, 200, 50, 'Status', font='font14')
---------------------------------------
Method resolution order:

ControlCheckMark
Control
__builtin__.object
-----------------------------------------------
Methods defined here:

getSelected(...)
getSelected() -- Returns the selected status for this checkmark as a bool.
example:
- selected = self.checkmark.getSelected()

setDisabledColor(...)
setDisabledColor(disabledColor) -- Set's this controls disabled color.
disabledColor : hexstring - color of diabled checkmark's label. (e.g.  '0xFFFF3300')
example:
- self.checkmark.setDisabledColor('0xFFFF3300')

setLabel(...)
setLabel(label[, font, textColor, disabledColor]) -- Set's this controls text attributes.
label : string or unicode - text string.
font : [opt] string - font used for label text. (e.g. 'font13')
textColor : [opt] hexstring - color of enabled checkmark's label. (e.g.  '0xFFFFFFFF')
disabledColor : [opt] hexstring - color of disabled checkmark's label. (e.g.  '0xFFFF3300')
example:
- self.checkmark.setLabel('Status', 'font14', '0xFFFFFFFF', '0xFFFF3300')

setSelected(...)
setSelected(isOn) -- Sets this checkmark status to on or off.
isOn : bool - True=selected (on) / False=not selected (off)
example:
- self.checkmark.setSelected(True)
------------------------------------
Data and other attributes defined here:

__new__ = <built-in method __new__ of type object>
T.__new__(S, ...) -> a new object with type S, a subtype of T
-----------------------------------------
Methods inherited from Control:
大概看了一下，应该是继承了Control类所有的方法
***********************************************
class ControlEdit(Control)
ControlEdit class.
ControlEdit (x, y, width, height, label[, font, textColor, disabledColor, alignment, focusTexture, noFocusTexture])
x : integer - x coordinate of control.
y : integer - y coordinate of control.
width : integer - width of control.
height : integer - height of control.
label : string or unicode - text string.
font : [opt] string - font used for label text. (e.g. 'font13')
textColor : [opt] hexstring - color of enabled label's label. (e.g.  '0xFFFFFFFF')
disabledColor : [opt] hexstring - color of disabled label's label. (e.g.  '0xFFFF3300')
alignment : [opt] integer - alignment of label - *Note, see xbfont.h
focusTexture : [opt] string - filename for focus texture.
noFocusTexture : [opt] string - filename for no focus texture.
isPassword : [opt] bool - True=mask text value with ****.
*Note, You can use the above as keywords for arguments and skip certain optional arguments.
  Once you use a keyword, all following arguments require the keyword.
  After you create the control, you need to add it to the window with addCoontrol()
example:
- self.edit = xbmcgui.ControlEdit (100, 250, 125, 75, 'Status')
-----------------------
Method resolution order:

ControlEdit
Control
__builtin__.object
-------------
Methods defined here:

getLabel(...)
getLabel() -- Returns the text heading for this edit control.
example:
- label = self.edit.getLabel()

getText(...)
getText() -- Returns the text value for this edit control.
example:
- value = self.edit.getText()

setLabel(...)
setLabel(label) - Set's text heading for this edit control.
label : string or unicode - text string.
example:
- self.edit.setLabel('Status')

setText(...)
setText(value) -- Set's text value for this edit control.
value : string or unicode - text string.
example:
- self.edit.setText('online')
----------------------
Data and other attributes defined here:
__new__ = <built-in method __new__ of type object>
T.__new__(S, ...) -> a new object with type S, a subtype of T
------------------
Methods inherited from Control:
大概看了一下，应该是继承了Control类所有的方法
*************************************
class ControlFadeLabel(Control)
ControlFadeLabel class.
Control that scroll's labl
ControlFadeLabel(x, y, width, height[, font, textColor, alignment])
x : integer - x coordinate of control.
y : integer - y coordinate of control.
width : integer - width of control.
height : integer - height of control.
font : [opt] string - font used for label text. (e.g. 'font13')
textColor : [opt] hexstring - color of fadelabel's labels. (e.g. '0xFFFFFFFF')
alignment : [opt] integer - alignment of label - *Note, see xbfont.h
*Note, You can use the above as keywords for arguments and skip certain optional arguments
  Once you use a keyword, all following arguments require the keyword.
  After you create the control, you need to add it to the window with addControl().
example:
- self.fadelabel = xbmcgui.ControlFadeLabel (100, 250, 200, 50, textColor='0xFFFFFFFF')
-------------------------------
Method resolution order:

ControlFadeLabel
Control
__builtin__.object
-----------------------------
Methods defined here:

addLabel(...)
addLabel(label) -- Add a label to this control for scrolling.
label : string or unicode - text string.
example:
- self.fadelabel.addLabel('This is a line of text that can scroll.')

reset(...)
reset() -- Cleear this fade label.
example:
- self.fadelabel.reset()

setScrolling(...)
setScrolling(scroll) -- Set scrolling.
scroll : boolean - True = enabled / False = disabled
example:
- self.fadelabel.setScrolling(False)
----------------------------------------------
Data and other attributes defined here:

__new__ = <built-in method __new__ of type object>
T.__new__(S, ...) -> a new object with type S, a subtype of T
----------------------------------------------
Methods inherited from Control:
大概看了一下，应该是继承了Control类中的所有方法
******************************************
class ControlGroup(Control)
ControlGroup class.
ControlGroup (x, y, width, height)
x : integer - x coordinate of control.
y : integer - y coordinate of control.
width : integer - width of control.
height : integer - height of control.
example:
- self.group = xbmc.ControlGroup(100, 250, 125, 75)
---------------------------
Method resolution order:
ControlGroup
Control
__builtin__.object
----------------------------
Data and other attributes defined here:

__new__ = <built-in method __new__ of type object>
T.__new__(S, ...) -> a new object with type S, a subtype of T
-----------------------------
Methods inherited from Control:
大概看了一下基本上是继承了Control类的所有方法
**********************************
class ControlImage(Control)
ControlImage class.
ControlImage(x, y, width, height, filename[, aspectRatio, colorDiffuse])
x : integer - x coordinate of control.
y: integer - y coordinate of control.
width : integer - width of control.
height : integer - height of control.
filename : string - image filename.
aspectRatio : [opt] integer - (values 0 - stretch (default), 1 = scale up (crops), 2 = scale down (black bar)
colorDiffuse : hexString - (example, '0xC0FF0000' (red tint))
*Note, You can use the above as keywords for arguments and skip certain optional arguments.
  Once you use a keyword, all following arguments require the keyword.
  After you create the control, you need to add it to the window with addControl().
example:
- self.image = xbmcgui.ControlImage(100, 250, 125, 75, aspectRatio=2)
----------------------------------
Method resolution order:
ControlImage
Control
__builtin__.object
-------------------------------
Methods defined here:

setColorDiffuse(...)
setColorDiffuse(colorDiffuse) -- Changes the images color.
colorDiffuse : hexString - (example, '0xC0FF0000' (red tint))
example:
- self.image.setColorDiffuse('0xC0FF0000')

setImage(...)
setImage(filename[, useCache]) -- Changes the image.
filename : string - image filename.
useCache : [opt] bool - True=use cache (default) / False=don't use cache.
example:
- self.image.setImage('special://home/scripts/test.png')
- self.image.setImage('special://home/scripts/test.png', False)
--------------------------------
Data and other attributes defined here:

__new__ = <built-in method __new__ of type object>
T.__new__(S, ...) -> a new object with type S, a subtype of T
-------------------------------------
Methods inherited from Control:
大概看了一下，基本上就是继承了Control类的所有方法
*********************************
class ControlLabel(Control)
ControlLabel class.
ControlLabel (x, y, width, height, label[, font, textColor, disabledColor, alignment, hashPath, angle])
x : integer - x coordinate of control.
y : integer - y coordinate of control.
width : integer - width of control.
height : integer - height of control.
label : string or unicode - text string.
font : [opt] string - font used for label text. (e.g. 'font13')
textColor : [opt] hexstring - color of enabled label's label. (e.g.  '0xFFFFFFFF')
disabledColor : [opt] hexstring - color of disasbled label's label. (e.g.  '0xFFFF3300')
alignment : [opt] integer - alignment of label - *Note, see xbfont.h
hashPath : [opt] bool - True=stores a path / False=no path.
angle : [opt] integer - angle of control. (+ rotates CCW, - rotates CW)
example:
- self.label = xbmcgui.ControlLabel (100, 250, 125, 75, 'Status', angle=45)
-------------------------
Method resolution order:

ControlLabel
Control
__builtin__.object
---------------------
Methods defined here:

getLabel(...)
getLabel() -- Returns the text value for this label.
example:
- label = self.label.getLabel()

setLabel(...)
setLabel(label) -- Set's text for this label.
label : string or unicode - text string.
example:
- self.label.setLabel('Status')
------------------------
Data and other attributes defined here:

__new__ = <built-in method __new__ of type object>
T.__new__(S, ..) -> a new object with type S, a subtype of T
-----------------------------
Methods inherited from Control:
大概看了一下应该是继承了Control类的所有方法
*********************************
class ControlList(Control)
ControlList class.
ControlList (x, y, width, height[, font, textColor, buttonTexture, buttonFocusTexture, selectedColor, imageWidth, imageHeight, itemTextXOffset, itemTextYOffset, itemHeight, space, alignmentY])n"//, shadowColor])
#这个语法有毛病，到底是啥后期再说明，先记录下
x : integer - x coordinate of control.
y : integer - y coordinate of control.
width : integer - width of control.
height : integer - height of control.
font : [opt] string - font used for items label. (e.g. 'font13')
textColor : [opt] hexstring - color of items label. (e.g. '0xFFFFFFFF')
buttonTexture : [opt] string - filename for focus texture.
buttonFocusTexture : [opt] string - filename for no focus texture.
selectedColor : [opt] integer - x offset of label.
imageWidth : [opt] integer - width of items icon or thumbnail.
imageHeight : [opt] integer - height of items icon or thumbnail.
itemTextXOffset : [opt] integer - x offset of items label.
itemTextYOffset : [opt] integer - y offset of items label.
itemHeight : [opt] integer - height of items.
space : [opt] integer - space between items.
alignmentY : [opt] integer - Y-axis alignment of items label - *Note, see xbfont.h
//"shadowColor : [opt] hexstring - color of items label's shadow. (e.g.  '0xFF000000')
*Note, You can use the above as keywords for arguments require the keyword.
After you create the control, you need to add it to the window with addControl().
example:
- self.cList = xbmcgui.ControlList (100, 250, 200, 250, 'font14', space=5)
-------------------------------------
Method resolution order:
ControlList
Control
__builtin__.object
-----------------------------
Methods defined here:

addItem(...)
addItem(item) -- Add a new item to this list control.
item : string, unicode or ListItem - item to add.
example:
- cList.addItem('Reboot XBMC')

addItems(...)
addItems(items) -- Adds a list of listitems or strings to this list control.
items : List - list of strings, unicode objects or ListItems to add.
*Note, You can use the above as keywords for arguments.
Large lists benefit considerably, than using the standard addItem()
example:
- cList.addItems(items=listitems)

getItemHeight(...)
getItemHeight() -- Returns the control's current item height as an integer.
example:
- item_height = self.cList.getItemHeight()

getListItem(...)
getListItem(index) -- Returns a given ListItem in this List.
index : integer - index number of item to return.
*Note, throws a ValueError if index is out of range.
example:
- listitem = cList.getListItem(6)

getSelectedItem(...)
getSelectedItem() -- Returns the selected item as a ListItem object.
*Note, Same as getSelectedPosition(), but instead of an integer a ListItem object is returned. Returns None for empty list.
See windowexample.py on how to use this.
example:
- item = cList.getSelectedItem()

getSelectedPosition(...)
getSelectedPosition() -- Returns the position of the selected item as an integer.
*Note, Returns -1 for empty lists.
example:
- pos = cList.getSelectedPosition()

getSpace(...)
getSpace() -- Returns the control's space between items as an integer.
example:
- gap = self.cList.getSpace()

getSpinControl(...)
getSpinControl() -- returns the associated ControlSpin object.
*Note, Not working completely yet - After adding this control list to a window it is not possible to change the settings of this spin control.
example:
- ctl = cList.getSpinControl()

removeItem(...)
removeItem(index) -- Remove an item by index number.
index : intefer - index number of the item to remove.
example:
- cList.removeItem(12)

reset(...)
reset() -- Clear all ListItems in this control list.
example:
- cList.reset()

selectItem(...)
selectItem(item) -- Select an item by index number.
item : integer - index number of the item to select.
example:
- cList.selectItem(12)

setImageDimensions(...)
setImageDimensions(imageWidth, imageHeight) -- Sets the width/height of items icon or thumbnail.
imageWidth : [opt] integer - width of items icon or thumbnail.
imageHeight : [opt] integer - height of items icon or thumbnail.
example:
- cList.setImageDimensions(18, 18)

setItemHeight(...)
setItemHeight(itemHeight) -- Sets the height of items.
itemHeight : integer - height of items.
example:
- cList.setItemHeight(25)

setPageControlVisible(...)
setPageControlVisible(visible) -- Sets the spin control's visible/hiddenstate.
visible : boolean - True=visible / False=hidden.
example:
- cList.setPageControlVisible(True)

setSpace(...)
setSpace(space) -- Set's the space between items.
space : [opt] integer - space between items.
example:
- cList.setSpace(5)

setStaticContent(...)
setStaticContent(items) -- Fills a static list with a list of listitems.
items : List - list of listitems to add.
*Note, You can use the above as keywords for arguments.
example:
- cList.setStaticContent(items=listitems)

size(...)
size() -- Returns the total number of items iin this list control as an integer.
example:
- cnt = cList.size()
---------------
Data and other attributes defined here:

__new__ = <built-in method __new__ of type object>
T.__new__(S, ...) -> a new object with type S, a subtype of T
------------------------
Methods inherited from Control:
大概看了一下,基本上继承了control类的所有方法
******************************************
class ControlProgress(Control)
Method resolution order:
ControlProgress
Control
__builtin__.object
-------------------------
Methods defined here:
getPercent(...)
getPercent() -- Returns a float of the percent of the progress.
example:
- print self.progress.getValue() #这块是不是写错了,后面的函数是getPercent(),而不是getValue()

setPercent(...)
setPercent(percent) -- Sets the percentage of the progressbar to show.
percent : float - percentage of the bar to show.
*Note, valid range for percent is 0-100
example:
- self.progress.setPercent(60)
---------------------------------------
Data and other attributes defined here:

__new__ = <built-in method __new__ of type object>
T._new__(S, ...) -> a new object with type S, a subtype of T
-------------------------------------------
Methods inherited from Control:
大概看了一下，基本上继承了Control类的所有方法
****************************************
class ControlRadioButton(Control)
ControlRadioButton class.
ControlRadioButton (x, y, width, height, label[, focusOnTexture, noFocusOnTexture, focusOffTexture, noFocusOffTexture, focusTexture, noFocusTexture, textOffsetX, textOffsetY, alignment, font, textColor, disabledColor])
x : integer - x coordinate of control.
y : integer - y coordinate of control.
width : integer - width of control.
height : integer - height of control.
label : string or unicode - text string.
focusOnTexture : [opt] string - filename for radio ON focused texture.
noFocusOnTexture : [opt] string - filename for radio ON not focused texture.
focusOfTexture : [opt] string - filename for radio OFF focused texture.
noFocusOffTexture : [opt] string - filename for radio OFF not focused texture.
focusTexture : [opt] string - filename for radio ON texture (deprecated, use focusOnTexture and noFocusOnTexture).
noFocusTexture : [opt] string - filename for radio OFF texture (deprecated, use focusOffTexture and noFocusOffTexture).
textOffsetX : [opt] integer - horizontal text offset
textOffsetY : [opt] integer - vertical text offset
alignment : [opt] integer - alignment of label = *Note, see xbfont.h
font : [opt] string - font used for label text. (e.g. 'font13')
texxtColor : [opt] hexstring - color of enabled checkmark's label. (e.g.  '0xFFFFFFFF')
disabledColor : [opt] hexstring - color of disabled checkmark's label. (e.g.  '0xFFFF3300')
*Note, You can use the above as keywords for arguments and skip certain
optional arguments.
Once you use a keyword, all following arguments require the keyword.
After you create the control, you need to add it to the window with addControl().
example:
- self.radiobutton = xbmcgui.ControlRadioButton (10, 250, 200, 50, 'Enable', font='font14')
------------------------------------
Method resolution order:

ControlRadioButton
Control
__builtin__.object
-------------------------
Methods defined here:

isSelected(...)
isSelected() -- Returns the radio buttons's selected status.
example:
- is = self.radiobutton.isSelected()

setLabel(...)
setLabel(label[, font, textColor, disabledColor, shadowColor, focusedColor]) -- Sset's the radio buttons text attributes.
label : string or unicode - text string.
font : [opt] string - font used for label text. (e.g. 'font13')
textColor : [opt] hexstring - color of enabled radio button's label. (e.g.  '0xFFFFFFFF')
disabledColor : [opt] hexstring - color of disabled radio button's label.  (e.g. '0xFFFF3300')
shadowColor : [opt] hexstring - color of radio button's label's shadow. (e.g.  '0xFF000000')
focusedColor : [opt] hexstring - color of focused radio button's label. (e.g.  '0xFFFFFF00')
*Note, You can use the above as keywords for arguments and skip certain optional arguments.
Once you use a keyword, all following arguments require the keyword.
example:
- self.radiobutton.setLabel('Status', 'font14', '0xFFFFFFFF', '0xFFFF3300', '0xFF000000')

setRadioDimension(...)
setRadioDimension(x, y, width, height) -- Sets the radio button's radio texture's position and size.
x : integer - x coordinate of radio texture.
y : integer  y coordinate of radio texture.
width : integer - width of radio texture.
height : integer - height of radio texture.
*Note, You can use the above as keywords for arguments and skip certain optional arguments.
Once you use a keyword, all following arguments require the keyword.
example:
- self.radiobutton.setRadioDimension(x=100, y=5, width=20, height=20)

setSelected(...)
setSelected(selected) -- Sets the radio button's selected status.
selected : bool - True=selected (on) / False=not selected (off)
*Note, You can use the above as keywords for arguments and skip certain optional arguments.
Once you use a keyword, all following arguments require the keyword.
example:
- self.radiobutton.setSelected(True)
---------------------------
Data and other attributes defined here:

__new__ = <built-in method __new__ of type object>
T.__new__(S, ...) -> a new object with type S, a subtype of T
-------------------------------
Methods inherited from Control:
大概看了一下，基本是继承了Control类的所有方法
*************************************
class ControlSlider(Control)
ControlSlider class.
ControlSlider(x, y, width, height[, textureback, texture, texturefocus])
x : integer - x coordinate of control.
y : integer - y coordinate of control.
width : integer - width of control.
height : integer - height of control.
textureback : [opt] string - image filename.
texture : [opt] string - image filename.
texturefocus : [opt] string - image filename.n"
*Note, You can use the above as keywords for arguments and skip certain optional arguments.
  Once you use a keyword, all following arguments require the keyword.
  After you create the control, you need to add it to the window with addControl().
example:
-self.slider = xbmcgui.ControlSlider(100, 250, 350, 40)
-----------------------------------------
Method resolution order:
ControlSlider
Control
__builtin__.object
---------------------------
Methods defined here:

getPercent(...)
getPercent() -- Returns a float of the percent of the slider.
example:
- print self.slider.getPercent()

setPercent(...)
setPercent(50) -- Sets the percent of the slider.
example:
- self.slider.setPercent(50)
---------------------------
Data and other attributes defined here:

__new__ = <built-in method __new__ of type object>
T.__new__(S, ...) -> a new object with type S, a subtype of T
---------------------------------
Methods inherited from Control:
大概看了一下，基本上继承了Control类的所有方法
**********************************
class ControlSpin(Control)
ControlSpin class.
- Not working yet -.
you can't create this object, it is returned by objects like ControlTextBox and ControlList.
--------------------------------
Method resolution order:

ControlSpin
Control
__builtin__.object
--------------------------------------
Methods defined here:

setTextures(...)
setTextures(up, down, upFocus, downFocus) -- Set's textures for this control.
texture are image files that are used for example in the skin
--------------------------------------
Methods inherited from Control:
大概看了一下，基本上继承了Control类的所有方法
***********************************
class ControlTextBox(Control)
ControlTexxtBox class.
ControlTextBox(x, y, width, height[, font, textColor])
x : integer - x coordinate of control.
y : integer - x coordinate of control.
width : integer - width of control.
height : integer - height of control.
font : [opt] string - font used for texxt. (e.g. 'font13')
textColor : [opt] hexstring - color of textbox's text. (e.g. '0xFFFFFFFF')
*Note, You can use the above as keywords for arguments and skip certain optional arguments.
  Once you use a keyword, all following arguments require the keyword.
  After you create the control, you need to add it to the window with addControl().
example:
- self.textbox = xbmcgui.ControlTextBox (100, 250, 300, 300, textColor='0xFFFFFFFF')
----------------------------------------------
Method resolutionn order:

ControlTextBox
Control
__builtin__.object
----------------------------
Methods defined here:

autoScroll(...)
autoScroll(delay, time, repeat) -- Set autoscrolling times.
delay : integer - Scroll delay (in ms) time : integer - Scroll time (in ms)
repeat : integer -Repeat time
example:
- self.textbox.autoScroll(1, 2, 1)

getText(...)
getText() -- Returns the text value for this textbox.
example:
- text = self.text.getText()

reset(...)
reset() -- Clear's this textbox.
example:
- self.textbox.reset()

scroll(...)
scroll(position)  Scrolls to the given position.
id : integer - position to scroll to.
example:
- self.textbox.scroll(10)

setText(...)
setText(text) -- Set's the text for this textbox.
text : string or unicode - text string.
example:
- self.textbox.setText('This is a line of texxt that can wrap.')
--------------------------------
Data and other attributes defined here:
__new__ = <built-in method __new_ of type object>
T.__new__(S, ...) -> a new object with type S, a subtype of T
------------------------------------
Methods inherited from Control:
大概看了一下，基本上继承了Control类的所有方法
********************************
class Diaglog(__builtin__.object)
Dialog class (Duh!)
------------------
Methods defined here:

browse(...)
browse(type, heading,,  shares[, mask, useThumbs, treatAsfolder, default, enableMultiple]) - Show a 'Browse' dialog.
type : integer - the type of browse dialog.
heading : string or unicode - dialog heading.
shares : string or unicode - from sources.xml. (myprograms)
mask : [opt] string or unicode - '|' separated file mask. (i.e. '.jpg|.png')
useThumbs : [opt] boolean - if True autoswitch to Thumb view if files exist.
treatAsFolder : [opt] boolean - if True playlists and archives act as folders.
default : [opt] string - default path or file.
enableMultiple : [opt] boolean - if True multiple file selection is enabled.
Type:
- 0 : ShowAndGetDirectory
- 1 : ShowAndGetFile
- 2 : ShowAndGetImage
- 3 : ShowAndGetWriteableDirectory

*Note, If enableMultiple is False (default): returns filename and/or path as a
string to the location of the highlighted item, if user pressed 'Ok' or a
masked item was selected. Returns the default value if dialog was canceled. If
enableMultiple is True: returns tuple of marked files as a string if user
pressed 'OK' or a masked item was selected. Returns empty tuple if dialog was
canceled. If type is 0 or 3 the enableMultiple parameter is ignore
example:
- dialog = xbmc.Dialog()
- fn = dialog.browse(3, 'XBMC', 'file', '', False, False, False, 'special://masterprofile/script_data/XBMC Lyrics')

browseMultiple(...)
browseMultiple(type, heading, shares[, mask, useThumbs, treatAsFolder, default]) -- Show a 'Browse' dialog.
type : integer - the type of browse dialog.
heading : string or unicode - dialog heading.
shares : string or unicode - from sources.xml. (i.e. 'myprograms')
mask : [opt] string or unicode - '|' separated file mask. (i.e. '.jpg|.png')
useThumbs : [opt] boolean - if True autoswitch to Thumb view if files exist (default=false).
treatAsFolder : [opt] boolean - if True playlists and archives act as folders (default=false).
default : [opt] string - default path or file.
Types:
-1 : ShowAndGetFile
-2 : ShowAndGetImage

*Note, returns tuple of marked filenames as a string, if user pressed 'Ok' or
a masked item was selected, Returns empty tuple if dialog was canceled.

empty:
- dialog = xbmcguiDialog()
- fn = dialog.browseMultiple(2, 'XBMC', 'file', '', False, False, 'special://masterprofile/script_data/XBMC Lyrics')

browseSingle(...)
browsesingle(type, heading, shares[, mask, useThumbs, treatAsFolder, default]) -- Show a 'Browse' dialog.
type : integer - the type of browse dialog.
heading : string or unicode - dialog heading.
shares : string or unicode - from sources.xml (i.e. 'myprograms')
mask : [opt] string or unicode - '|' separated file mask. (i.e. '.jpg|.png')
useThumbs : [opt] boolean - if True autoswitch to Tthumb view if files exist (default=false).
treaAsFolder : [opt] boolean - if True playlists and archives act as folders (default=false).
default : [opt] string - default path or file.

Type:
- 0 : ShowAndGetDirectory
- 1 : ShowAndGetFile
- 2 : ShowAndGetImage
- 3 : ShowAndGetWriteableDirectory

*Note, Returns filename and/or path as a string to the location of the
highlighted item, if user pressed 'Ok' or a masked item was selected. Returns
the default value if dialog was canceled.

example:
- dialog = xbmcgui.Dialog()
- fn = dialog.browsesingle(3, 'XBMC', 'file', '', False, False, 'special://masterprofile/script_data/XBMC Lyrics')
